{"ast":null,"code":"var _jsxFileName = \"/Users/nco/Documents/GitHub/dashboard/src/pages/StaPage.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { load } from '../store/actions/statera';\nimport PageHeader from '../Components/PageHeader/PageHeader';\nimport classes from './StaPage.module.scss';\nimport cx from 'classnames';\nimport Metric from '../Components/Metric/Metric';\nimport TokenIcon from '../Components/TokenIcon/TokenIcon';\nimport { Chart } from 'react-google-charts';\nimport SegmentedTabs from '../Components/SegmentedTabs/SegmentedTabs';\n\nconst genFormattedNumber = (number, dp) => {\n  const options = dp ? {\n    minimumFractionDigits: dp,\n    maximumFractionDigits: dp\n  } : undefined;\n  return Intl.NumberFormat('en-GB', options).format(number);\n};\n\nconst StaPage = () => {\n  const dispatch = useDispatch();\n  const [currentTab, setCurrentTab] = useState('price');\n  useEffect(() => {\n    dispatch(load());\n  }, [dispatch]);\n\n  const handleChartTabInput = value => {\n    setCurrentTab(value);\n  };\n\n  const stateraState = useSelector(state => state.statera);\n  let priceDom;\n\n  if (stateraState.meta.loading) {\n    priceDom = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 16\n      }\n    }, \"Loading\");\n  } else if (stateraState.meta.success) {\n    priceDom = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, \"Current Price: \", stateraState.price.current, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }), \"Previous Price: \", stateraState.price.previous);\n  } // Supply calcs\n\n\n  let staSupply;\n  let staSupplyProgress;\n  let wStaSupply;\n  let wStaSupplyProgress;\n  let staExchangeRate;\n  let wStaExchangeRate;\n  let priceChartData;\n  let chartDom;\n\n  if (stateraState.meta.success) {\n    staSupply = genFormattedNumber(stateraState.supply.remainingSta.toFixed(0));\n    wStaSupply = genFormattedNumber(stateraState.supply.remainingWSta.toFixed(0));\n    staSupplyProgress = stateraState.supply.remainingSta.div(stateraState.supply.total);\n    wStaSupplyProgress = stateraState.supply.remainingWSta.div(stateraState.supply.remainingSta);\n    staExchangeRate = stateraState.exchangeRate.staToWSta;\n    wStaExchangeRate = stateraState.exchangeRate.wStaToSta;\n\n    if (currentTab === 'price') {\n      chartDom = /*#__PURE__*/React.createElement(Chart, {\n        width: '500px',\n        height: '400px',\n        chartType: \"LineChart\",\n        loader: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 19\n          }\n        }, \"Loading Chart\"),\n        data: [['Datetime', 'Price'], ...stateraState.chart.price],\n        options: {\n          hAxis: {\n            title: 'Datetime'\n          },\n          vAxis: {\n            title: 'Price'\n          }\n        },\n        rootProps: {\n          'data-testid': '1'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      });\n    } else if (currentTab === 'volume') {\n      chartDom = /*#__PURE__*/React.createElement(Chart, {\n        width: '500px',\n        height: '400px',\n        chartType: \"LineChart\",\n        loader: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }\n        }, \"Loading Chart\"),\n        data: [['Datetime', 'Volume'], ...stateraState.chart.volume],\n        options: {\n          hAxis: {\n            title: 'Datetime'\n          },\n          vAxis: {\n            title: 'Volume'\n          }\n        },\n        rootProps: {\n          'data-testid': '1'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n\n  if (stateraState.meta.success) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PageHeader, {\n      title: \"Statera (STA)\",\n      price: genFormattedNumber(stateraState.price.sta.current, 4),\n      priceChangePerc: genFormattedNumber(stateraState.price.sta.changePerc, 2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardLeft,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.chart, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }, chartDom, /*#__PURE__*/React.createElement(SegmentedTabs, {\n      items: [{\n        text: 'Price',\n        value: 'price'\n      }, {\n        text: 'Volume',\n        value: 'volume'\n      }],\n      value: currentTab,\n      onInput: handleChartTabInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.supply, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Remaining Supply\",\n      valueItems: [{\n        value: staSupply,\n        unit: 'STA'\n      }],\n      progressPerc: staSupplyProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Supply Wrapped\",\n      valueItems: [{\n        value: wStaSupply,\n        unit: 'wSTA'\n      }],\n      progressPerc: wStaSupplyProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.volume, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Volume (24h)\",\n      valueItems: [{\n        value: genFormattedNumber(stateraState.volume.inSta, 0),\n        unit: 'STA'\n      }, {\n        value: genFormattedNumber(stateraState.volume.inCurrency),\n        unit: 'USD'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.exchangeRate, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Exchange Rate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRowIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TokenIcon, {\n      token: \"STA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRowText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }\n    }, `1 STA = ${genFormattedNumber(staExchangeRate, 2)} WSTA`)), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRowIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TokenIcon, {\n      token: \"WSTA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRowText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, `1 WSTA = ${genFormattedNumber(wStaExchangeRate, 2)} STA`))))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.wallet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 12\n      }\n    }, \"Loading\");\n  }\n};\n\nexport default StaPage;","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/pages/StaPage.tsx"],"names":["React","useState","useEffect","useDispatch","useSelector","load","PageHeader","classes","cx","Metric","TokenIcon","Chart","SegmentedTabs","genFormattedNumber","number","dp","options","minimumFractionDigits","maximumFractionDigits","undefined","Intl","NumberFormat","format","StaPage","dispatch","currentTab","setCurrentTab","handleChartTabInput","value","stateraState","state","statera","priceDom","meta","loading","success","price","current","previous","staSupply","staSupplyProgress","wStaSupply","wStaSupplyProgress","staExchangeRate","wStaExchangeRate","priceChartData","chartDom","supply","remainingSta","toFixed","remainingWSta","div","total","exchangeRate","staToWSta","wStaToSta","chart","hAxis","title","vAxis","volume","container","dashboardContainer","sta","changePerc","dashboard","dashboardLeft","card","text","dashboardRight","metric","unit","inSta","inCurrency","exchangeRateRow","exchangeRateRowIcon","exchangeRateRowText","wallet"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { load } from '../store/actions/statera'\r\nimport PageHeader from '../Components/PageHeader/PageHeader'\r\nimport classes from './StaPage.module.scss'\r\nimport cx from 'classnames'\r\nimport Metric from '../Components/Metric/Metric'\r\nimport TokenIcon from '../Components/TokenIcon/TokenIcon'\r\nimport { Chart } from 'react-google-charts'\r\nimport _ from 'lodash'\r\nimport SegmentedTabs from '../Components/SegmentedTabs/SegmentedTabs'\r\n\r\nconst genFormattedNumber = (number:any, dp?:number) => {\r\n  const options = dp ? {\r\n    minimumFractionDigits: dp,\r\n    maximumFractionDigits: dp,\r\n  } : undefined\r\n\r\n  return Intl.NumberFormat('en-GB', options).format(number)\r\n}\r\n\r\nconst StaPage: FunctionComponent<void> = () => {\r\n  const dispatch = useDispatch()\r\n  const [currentTab, setCurrentTab] = useState('price')\r\n\r\n  useEffect(() => {\r\n    dispatch(load())\r\n  }, [dispatch])\r\n\r\n  const handleChartTabInput = (value:any) => {\r\n    setCurrentTab(value)\r\n  }\r\n\r\n  const stateraState = useSelector((state:any) => state.statera)\r\n\r\n  let priceDom\r\n  if (stateraState.meta.loading) {\r\n    priceDom = <div>Loading</div>\r\n  } else if (stateraState.meta.success) {\r\n    priceDom = (\r\n      <div>\r\n        Current Price: { stateraState.price.current }\r\n        <br />\r\n        Previous Price: { stateraState.price.previous }\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  // Supply calcs\r\n\r\n  let staSupply\r\n  let staSupplyProgress\r\n  let wStaSupply\r\n  let wStaSupplyProgress\r\n  let staExchangeRate\r\n  let wStaExchangeRate\r\n  let priceChartData\r\n  let chartDom\r\n  if (stateraState.meta.success) {\r\n    staSupply = genFormattedNumber(stateraState.supply.remainingSta.toFixed(0));\r\n    wStaSupply = genFormattedNumber(stateraState.supply.remainingWSta.toFixed(0));\r\n\r\n    staSupplyProgress = stateraState.supply.remainingSta.div(stateraState.supply.total)\r\n    wStaSupplyProgress = stateraState.supply.remainingWSta.div(stateraState.supply.remainingSta)\r\n\r\n    staExchangeRate = stateraState.exchangeRate.staToWSta\r\n    wStaExchangeRate = stateraState.exchangeRate.wStaToSta\r\n\r\n    if (currentTab === 'price') {\r\n      chartDom = (\r\n        <Chart\r\n          width={'500px'}\r\n          height={'400px'}\r\n          chartType=\"LineChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={[\r\n            ['Datetime', 'Price'],\r\n            ...stateraState.chart.price,\r\n          ]}\r\n          options={{\r\n            hAxis: {\r\n              title: 'Datetime',\r\n            },\r\n            vAxis: {\r\n              title: 'Price',\r\n            },\r\n          }}\r\n          rootProps={{ 'data-testid': '1' }}\r\n        />\r\n      )\r\n    } else if (currentTab === 'volume') {\r\n      chartDom = (\r\n        <Chart\r\n          width={'500px'}\r\n          height={'400px'}\r\n          chartType=\"LineChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={[\r\n            ['Datetime', 'Volume'],\r\n            ...stateraState.chart.volume,\r\n          ]}\r\n          options={{\r\n            hAxis: {\r\n              title: 'Datetime',\r\n            },\r\n            vAxis: {\r\n              title: 'Volume',\r\n            },\r\n          }}\r\n          rootProps={{ 'data-testid': '1' }}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  if (stateraState.meta.success) {\r\n    return (\r\n      <div className={classes.container}>\r\n        <div className={classes.dashboardContainer}>\r\n          <PageHeader\r\n            title=\"Statera (STA)\"\r\n            price={genFormattedNumber(stateraState.price.sta.current, 4)}\r\n            priceChangePerc={genFormattedNumber(stateraState.price.sta.changePerc, 2)}\r\n          />\r\n\r\n          <div className={classes.dashboard}>\r\n            <div className={classes.dashboardLeft}>\r\n              <div className={cx(classes.chart, classes.card)}>\r\n                { chartDom }\r\n                <SegmentedTabs\r\n                  items={[{\r\n                    text: 'Price',\r\n                    value: 'price',\r\n                  }, {\r\n                    text: 'Volume',\r\n                    value: 'volume',\r\n                  }]}\r\n                  value={currentTab}\r\n                  onInput={handleChartTabInput}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className={classes.dashboardRight}>\r\n              <div className={cx(classes.supply, classes.card)}>\r\n                <Metric\r\n                  className={classes.metric}\r\n                  label=\"Remaining Supply\"\r\n                  valueItems={[{\r\n                    value: staSupply,\r\n                    unit: 'STA',\r\n                  }]}\r\n                  progressPerc={staSupplyProgress}\r\n                />\r\n\r\n                <Metric\r\n                  className={classes.metric}\r\n                  label=\"Supply Wrapped\"\r\n                  valueItems={[{\r\n                    value: wStaSupply,\r\n                    unit: 'wSTA',\r\n                  }]}\r\n                  progressPerc={wStaSupplyProgress}\r\n                />\r\n              </div>\r\n\r\n              <div className={cx(classes.volume, classes.card)}>\r\n                <Metric\r\n                  className={classes.metric}\r\n                  label=\"Volume (24h)\"\r\n                  valueItems={[{\r\n                    value: genFormattedNumber(stateraState.volume.inSta, 0),\r\n                    unit: 'STA',\r\n                  }, {\r\n                    value: genFormattedNumber(stateraState.volume.inCurrency),\r\n                    unit: 'USD',\r\n                  }]}\r\n                />\r\n              </div>\r\n\r\n              <div className={cx(classes.exchangeRate, classes.card)}>\r\n                <Metric\r\n                  className={classes.metric}\r\n                  label=\"Exchange Rate\"\r\n                >\r\n                  <div className={classes.exchangeRateRow}>\r\n                    <div className={classes.exchangeRateRowIcon}>\r\n                      <TokenIcon token=\"STA\" />\r\n                    </div>\r\n                    <div className={classes.exchangeRateRowText}>\r\n                      { `1 STA = ${genFormattedNumber(staExchangeRate, 2) } WSTA` }\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className={classes.exchangeRateRow}>\r\n                    <div className={classes.exchangeRateRowIcon}>\r\n                      <TokenIcon token=\"WSTA\" />\r\n                    </div>\r\n                    <div className={classes.exchangeRateRowText}>\r\n                      { `1 WSTA = ${genFormattedNumber(wStaExchangeRate, 2) } STA` }\r\n                    </div>\r\n                  </div>\r\n                </Metric>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.wallet}>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return <div>Loading</div>\r\n  }\r\n}\r\n\r\nexport default StaPage\r\n"]},"metadata":{},"sourceType":"module"}