{"ast":null,"code":"import { Contract } from 'ethers';\nimport { isAddress } from '@ethersproject/address';\nimport { ABIError, ABINotFound } from './Errors'; // import { getContract } from './utils'\n\nexport const etherJsFetcher = (provider, ABIs) => (...args) => {\n  let parsed;\n\n  try {\n    parsed = JSON.parse(args[0]);\n  } catch (e) {// fallback silently\n  }\n\n  const [arg1] = parsed || args;\n\n  const execute = parameters => {\n    const [param1, param2, ...otherParams] = parameters; // it's a contract\n\n    if (isAddress(param1)) {\n      if (!ABIs) throw new ABIError(`ABI repo not found`);\n      if (!ABIs.get) throw new ABIError(`ABI repo isn't a Map`);\n      const address = param1;\n      const method = param2;\n      const abi = ABIs.get(address);\n      if (!abi) throw new ABINotFound(`ABI not found for ${address}`);\n      const contract = new Contract(address, abi, provider.getSigner());\n      return contract[method](...otherParams);\n    } // it's a eth call\n\n\n    const method = param1;\n    return provider[method](param2, ...otherParams);\n  }; // it's a batch call\n\n\n  if (Array.isArray(arg1)) {\n    const calls = parsed; // TODO LS faster execution using one multicall. Perhaps using https://github.com/Destiner/ethcall\n\n    return Promise.all(calls.map(call => {\n      // TODO LS save the key in the cache\n      return execute(call);\n    }));\n  }\n\n  return execute(args);\n};\nexport default etherJsFetcher;","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/node_modules/ether-swr/esm/ether-js-fetcher.js"],"names":["Contract","isAddress","ABIError","ABINotFound","etherJsFetcher","provider","ABIs","args","parsed","JSON","parse","e","arg1","execute","parameters","param1","param2","otherParams","get","address","method","abi","contract","getSigner","Array","isArray","calls","Promise","all","map","call"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,UAAtC,C,CACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB,CAAC,GAAGC,IAAJ,KAAa;AAC3D,MAAIC,MAAJ;;AACA,MAAI;AACAA,IAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAAC,CAAD,CAAf,CAAT;AACH,GAFD,CAGA,OAAOI,CAAP,EAAU,CACN;AACH;;AACD,QAAM,CAACC,IAAD,IAASJ,MAAM,IAAID,IAAzB;;AACA,QAAMM,OAAO,GAAIC,UAAD,IAAgB;AAC5B,UAAM,CAACC,MAAD,EAASC,MAAT,EAAiB,GAAGC,WAApB,IAAmCH,UAAzC,CAD4B,CAE5B;;AACA,QAAIb,SAAS,CAACc,MAAD,CAAb,EAAuB;AACnB,UAAI,CAACT,IAAL,EACI,MAAM,IAAIJ,QAAJ,CAAc,oBAAd,CAAN;AACJ,UAAI,CAACI,IAAI,CAACY,GAAV,EACI,MAAM,IAAIhB,QAAJ,CAAc,sBAAd,CAAN;AACJ,YAAMiB,OAAO,GAAGJ,MAAhB;AACA,YAAMK,MAAM,GAAGJ,MAAf;AACA,YAAMK,GAAG,GAAGf,IAAI,CAACY,GAAL,CAASC,OAAT,CAAZ;AACA,UAAI,CAACE,GAAL,EACI,MAAM,IAAIlB,WAAJ,CAAiB,qBAAoBgB,OAAQ,EAA7C,CAAN;AACJ,YAAMG,QAAQ,GAAG,IAAItB,QAAJ,CAAamB,OAAb,EAAsBE,GAAtB,EAA2BhB,QAAQ,CAACkB,SAAT,EAA3B,CAAjB;AACA,aAAOD,QAAQ,CAACF,MAAD,CAAR,CAAiB,GAAGH,WAApB,CAAP;AACH,KAf2B,CAgB5B;;;AACA,UAAMG,MAAM,GAAGL,MAAf;AACA,WAAOV,QAAQ,CAACe,MAAD,CAAR,CAAiBJ,MAAjB,EAAyB,GAAGC,WAA5B,CAAP;AACH,GAnBD,CAT2D,CA6B3D;;;AACA,MAAIO,KAAK,CAACC,OAAN,CAAcb,IAAd,CAAJ,EAAyB;AACrB,UAAMc,KAAK,GAAGlB,MAAd,CADqB,CAErB;;AACA,WAAOmB,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAN,CAAUC,IAAI,IAAI;AACjC;AACA,aAAOjB,OAAO,CAACiB,IAAD,CAAd;AACH,KAHkB,CAAZ,CAAP;AAIH;;AACD,SAAOjB,OAAO,CAACN,IAAD,CAAd;AACH,CAvCM;AAwCP,eAAeH,cAAf","sourcesContent":["import { Contract } from 'ethers';\nimport { isAddress } from '@ethersproject/address';\nimport { ABIError, ABINotFound } from './Errors';\n// import { getContract } from './utils'\nexport const etherJsFetcher = (provider, ABIs) => (...args) => {\n    let parsed;\n    try {\n        parsed = JSON.parse(args[0]);\n    }\n    catch (e) {\n        // fallback silently\n    }\n    const [arg1] = parsed || args;\n    const execute = (parameters) => {\n        const [param1, param2, ...otherParams] = parameters;\n        // it's a contract\n        if (isAddress(param1)) {\n            if (!ABIs)\n                throw new ABIError(`ABI repo not found`);\n            if (!ABIs.get)\n                throw new ABIError(`ABI repo isn't a Map`);\n            const address = param1;\n            const method = param2;\n            const abi = ABIs.get(address);\n            if (!abi)\n                throw new ABINotFound(`ABI not found for ${address}`);\n            const contract = new Contract(address, abi, provider.getSigner());\n            return contract[method](...otherParams);\n        }\n        // it's a eth call\n        const method = param1;\n        return provider[method](param2, ...otherParams);\n    };\n    // it's a batch call\n    if (Array.isArray(arg1)) {\n        const calls = parsed;\n        // TODO LS faster execution using one multicall. Perhaps using https://github.com/Destiner/ethcall\n        return Promise.all(calls.map(call => {\n            // TODO LS save the key in the cache\n            return execute(call);\n        }));\n    }\n    return execute(args);\n};\nexport default etherJsFetcher;\n"]},"metadata":{},"sourceType":"module"}