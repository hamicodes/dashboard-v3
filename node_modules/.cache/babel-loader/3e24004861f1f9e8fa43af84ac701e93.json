{"ast":null,"code":"var _jsxFileName = \"/Users/nco/Documents/GitHub/dashboard/src/pages/StaPage.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { load } from '../store/actions/statera';\nimport PageHeader from '../Components/PageHeader/PageHeader';\nimport classes from './PoolPage.module.scss';\nimport cx from 'classnames';\nimport Metric from '../Components/Metric/Metric';\nimport TokenIcon from '../Components/TokenIcon/TokenIcon';\nimport { Chart } from 'react-google-charts';\nimport _ from 'lodash';\nimport SegmentedTabs from '../Components/SegmentedTabs/SegmentedTabs';\nimport { genFormattedNumber } from '../util/numberFormat';\nimport Loader from '../Components/Loader/Loader';\n\nconst StaPage = () => {\n  const dispatch = useDispatch();\n  const [chartType, setChartType] = useState('price');\n  const [chartTimePeriod, setChartTimePeriod] = useState('1_day');\n  useEffect(() => {\n    dispatch(load());\n  }, [dispatch]);\n\n  const handleChartTypeTab = value => {\n    setChartType(value);\n  };\n\n  const handleChartTimePeriodTab = value => {\n    setChartTimePeriod(value);\n  };\n\n  const stateraState = useSelector(state => state.statera);\n\n  if (stateraState.meta.success) {\n    const staSupply = genFormattedNumber(stateraState.supply.remainingSta.toFixed(0));\n    const wStaSupply = genFormattedNumber(stateraState.supply.remainingWSta.toFixed(0));\n    const staSupplyProgress = stateraState.supply.remainingSta.div(stateraState.supply.total);\n    const wStaSupplyProgress = stateraState.supply.remainingWSta.div(stateraState.supply.remainingSta);\n    const staExchangeRate = stateraState.exchangeRate.staToWSta;\n    const wStaExchangeRate = stateraState.exchangeRate.wStaToSta; // Transform chart data by period\n\n    let chartPriceData;\n    let chartVolumeData;\n\n    switch (chartTimePeriod) {\n      case \"1_day\":\n        {\n          chartPriceData = _.takeRight(stateraState.chart.price, 24);\n          chartVolumeData = _.takeRight(stateraState.chart.volume, 24);\n          break;\n        }\n\n      case \"7_day\":\n        {\n          chartPriceData = _.takeRight(stateraState.chart.price, 168);\n          chartVolumeData = _.takeRight(stateraState.chart.volume, 168);\n          break;\n        }\n\n      case \"30_day\":\n        {\n          chartPriceData = stateraState.chart.price;\n          chartVolumeData = stateraState.chart.volume;\n          break;\n        }\n    }\n\n    let chartData;\n    let chartLeftMargin;\n\n    switch (chartType) {\n      case 'price':\n        {\n          chartData = [['Datetime', 'Price'], ...chartPriceData];\n          chartLeftMargin = 60;\n          break;\n        }\n\n      case 'volume':\n        {\n          chartData = [['Datetime', 'Volume'], ...chartVolumeData];\n          chartLeftMargin = 80;\n          break;\n        }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PageHeader, {\n      title: \"Statera (STA)\",\n      price: genFormattedNumber(stateraState.price.sta.current, 4),\n      priceChangePerc: genFormattedNumber(stateraState.price.sta.changePerc, 2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardLeft,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.chartCard, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      width: '100%',\n      height: '400px',\n      chartType: \"LineChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }\n      }, \"Loading Chart\"),\n      data: chartData,\n      options: {\n        legend: 'none',\n        chartArea: {\n          left: chartLeftMargin,\n          top: 20,\n          width: '90%',\n          height: '90%'\n        },\n        hAxis: {\n          textPosition: 'none',\n          gridlines: {\n            color: 'transparent'\n          },\n          textStyle: {\n            fontName: 'Inter',\n            fontSize: 13,\n            fontWeight: 600,\n            color: '#595e78'\n          }\n        },\n        vAxis: {\n          format: chartType === 'price' ? '$#,###.###' : '$#,###',\n          gridlines: {\n            color: '#e6e6f0'\n          },\n          minorGridlines: {\n            color: 'transparent'\n          },\n          textStyle: {\n            fontName: 'Inter',\n            fontSize: 13,\n            fontWeight: 600,\n            color: '#595e78'\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.chartActions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.typeTabContainer,\n      style: {\n        maxWidth: '200px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(SegmentedTabs, {\n      items: [{\n        text: 'Price',\n        value: 'price'\n      }, {\n        text: 'Volume',\n        value: 'volume'\n      }],\n      value: chartType,\n      onInput: handleChartTypeTab,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.timePeriodTabContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(SegmentedTabs, {\n      items: [{\n        text: '1D',\n        value: '1_day'\n      }, {\n        text: '7D',\n        value: '7_day'\n      }, {\n        text: '30D',\n        value: '30_day'\n      }],\n      value: chartTimePeriod,\n      onInput: handleChartTimePeriodTab,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.supply, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Remaining Supply\",\n      valueItems: [{\n        value: staSupply,\n        suffix: 'STA'\n      }],\n      progressPerc: staSupplyProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Supply Wrapped\",\n      valueItems: [{\n        value: wStaSupply,\n        suffix: 'wSTA'\n      }],\n      progressPerc: wStaSupplyProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.volume, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Volume (24h)\",\n      valueItems: [{\n        value: genFormattedNumber(stateraState.volume.inSta, 0),\n        suffix: 'STA'\n      }, {\n        value: genFormattedNumber(stateraState.volume.inCurrency),\n        suffix: 'USD'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.exchangeRate, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Exchange Rate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRowIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TokenIcon, {\n      token: \"STA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRowText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }\n    }, `1 STA = ${genFormattedNumber(staExchangeRate, 2)} WSTA`)), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRowIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TokenIcon, {\n      token: \"WSTA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.exchangeRateRowText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, `1 WSTA = ${genFormattedNumber(wStaExchangeRate, 2)} STA`))))))));\n  } else {\n    return /*#__PURE__*/React.createElement(Loader, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 12\n      }\n    });\n  }\n};\n\nexport default StaPage;","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/pages/StaPage.tsx"],"names":["React","useState","useEffect","useDispatch","useSelector","load","PageHeader","classes","cx","Metric","TokenIcon","Chart","_","SegmentedTabs","genFormattedNumber","Loader","StaPage","dispatch","chartType","setChartType","chartTimePeriod","setChartTimePeriod","handleChartTypeTab","value","handleChartTimePeriodTab","stateraState","state","statera","meta","success","staSupply","supply","remainingSta","toFixed","wStaSupply","remainingWSta","staSupplyProgress","div","total","wStaSupplyProgress","staExchangeRate","exchangeRate","staToWSta","wStaExchangeRate","wStaToSta","chartPriceData","chartVolumeData","takeRight","chart","price","volume","chartData","chartLeftMargin","container","dashboardContainer","sta","current","changePerc","dashboard","dashboardLeft","chartCard","card","chartContainer","legend","chartArea","left","top","width","height","hAxis","textPosition","gridlines","color","textStyle","fontName","fontSize","fontWeight","vAxis","format","minorGridlines","chartActions","typeTabContainer","maxWidth","text","timePeriodTabContainer","dashboardRight","metric","suffix","inSta","inCurrency","exchangeRateRow","exchangeRateRowIcon","exchangeRateRowText"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { load } from '../store/actions/statera'\r\nimport PageHeader from '../Components/PageHeader/PageHeader'\r\nimport classes from './PoolPage.module.scss'\r\nimport cx from 'classnames'\r\nimport Metric from '../Components/Metric/Metric'\r\nimport TokenIcon from '../Components/TokenIcon/TokenIcon'\r\nimport { Chart } from 'react-google-charts'\r\nimport _ from 'lodash'\r\nimport SegmentedTabs from '../Components/SegmentedTabs/SegmentedTabs'\r\nimport { genFormattedNumber } from '../util/numberFormat'\r\nimport Loader from '../Components/Loader/Loader'\r\n\r\n\r\nconst StaPage: FunctionComponent = () => {\r\n  const dispatch = useDispatch()\r\n  const [chartType, setChartType] = useState('price')\r\n  const [chartTimePeriod, setChartTimePeriod] = useState('1_day')\r\n\r\n  useEffect(() => {\r\n    dispatch(load())\r\n  }, [dispatch])\r\n\r\n  const handleChartTypeTab = (value:string) => {\r\n    setChartType(value)\r\n  }\r\n\r\n  const handleChartTimePeriodTab = (value:string) => {\r\n    setChartTimePeriod(value)\r\n  }\r\n\r\n  const stateraState = useSelector((state:any) => state.statera)\r\n\r\n  if (stateraState.meta.success) {\r\n    const staSupply = genFormattedNumber(stateraState.supply.remainingSta.toFixed(0));\r\n    const wStaSupply = genFormattedNumber(stateraState.supply.remainingWSta.toFixed(0));\r\n\r\n    const staSupplyProgress = stateraState.supply.remainingSta.div(stateraState.supply.total)\r\n    const wStaSupplyProgress = stateraState.supply.remainingWSta.div(stateraState.supply.remainingSta)\r\n\r\n    const staExchangeRate = stateraState.exchangeRate.staToWSta\r\n    const wStaExchangeRate = stateraState.exchangeRate.wStaToSta\r\n\r\n    // Transform chart data by period\r\n    let chartPriceData\r\n    let chartVolumeData\r\n    switch (chartTimePeriod) {\r\n      case \"1_day\": {\r\n        chartPriceData = _.takeRight(stateraState.chart.price, 24)\r\n        chartVolumeData = _.takeRight(stateraState.chart.volume, 24)\r\n        break;\r\n      }\r\n\r\n      case \"7_day\": {\r\n        chartPriceData = _.takeRight(stateraState.chart.price, 168)\r\n        chartVolumeData = _.takeRight(stateraState.chart.volume, 168)\r\n        break;\r\n      }\r\n\r\n      case \"30_day\": {\r\n        chartPriceData = stateraState.chart.price\r\n        chartVolumeData = stateraState.chart.volume\r\n        break;\r\n      }\r\n    }\r\n\r\n    let chartData\r\n    let chartLeftMargin\r\n    switch (chartType) {\r\n      case 'price': {\r\n        chartData = [\r\n          ['Datetime', 'Price'],\r\n          ...chartPriceData,\r\n        ]\r\n        chartLeftMargin = 60\r\n        break\r\n      }\r\n\r\n      case 'volume': {\r\n        chartData = [\r\n          ['Datetime', 'Volume'],\r\n          ...chartVolumeData,\r\n        ]\r\n        chartLeftMargin = 80\r\n        break\r\n      }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <div className={classes.dashboardContainer}>\r\n          <PageHeader\r\n            title=\"Statera (STA)\"\r\n            price={genFormattedNumber(stateraState.price.sta.current, 4)}\r\n            priceChangePerc={genFormattedNumber(stateraState.price.sta.changePerc, 2)}\r\n          />\r\n\r\n          <div className={classes.dashboard}>\r\n            <div className={classes.dashboardLeft}>\r\n              <div className={cx(classes.chartCard, classes.card)}>\r\n                <div className={classes.chartContainer}>\r\n                  <Chart\r\n                    width={'100%'}\r\n                    height={'400px'}\r\n                    chartType=\"LineChart\"\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={chartData}\r\n                    options={{\r\n                      legend: 'none',\r\n                      chartArea: {\r\n                        left: chartLeftMargin,\r\n                        top: 20,\r\n                        width: '90%',\r\n                        height: '90%',\r\n                      },\r\n                      hAxis: {\r\n                        textPosition: 'none',\r\n                        gridlines: {\r\n                          color: 'transparent'\r\n                        },\r\n                        textStyle: {\r\n                          fontName: 'Inter',\r\n                          fontSize: 13,\r\n                          fontWeight: 600,\r\n                          color: '#595e78',\r\n                        },\r\n                      },\r\n                      vAxis: {\r\n                        format: chartType === 'price' ? '$#,###.###' : '$#,###',\r\n                        gridlines: {\r\n                          color: '#e6e6f0'\r\n                        },\r\n                        minorGridlines: {\r\n                          color: 'transparent'\r\n                        },\r\n                        textStyle: {\r\n                          fontName: 'Inter',\r\n                          fontSize: 13,\r\n                          fontWeight: 600,\r\n                          color: '#595e78',\r\n                        },\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div className={classes.chartActions}>\r\n                  <div\r\n                    className={classes.typeTabContainer}\r\n                    style={{\r\n                      maxWidth: '200px'\r\n                    }}\r\n                  >\r\n                    <SegmentedTabs\r\n                      items={[{\r\n                        text: 'Price',\r\n                        value: 'price',\r\n                      }, {\r\n                        text: 'Volume',\r\n                        value: 'volume',\r\n                      }]}\r\n                      value={chartType}\r\n                      onInput={handleChartTypeTab}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className={classes.timePeriodTabContainer}>\r\n                    <SegmentedTabs\r\n                      items={[{\r\n                        text: '1D',\r\n                        value: '1_day',\r\n                      }, {\r\n                        text: '7D',\r\n                        value: '7_day',\r\n                      }, {\r\n                        text: '30D',\r\n                        value: '30_day',\r\n                      }]}\r\n                      value={chartTimePeriod}\r\n                      onInput={handleChartTimePeriodTab}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={classes.dashboardRight}>\r\n              <div className={cx(classes.supply, classes.card)}>\r\n                <Metric\r\n                  className={classes.metric}\r\n                  label=\"Remaining Supply\"\r\n                  valueItems={[{\r\n                    value: staSupply,\r\n                    suffix: 'STA',\r\n                  }]}\r\n                  progressPerc={staSupplyProgress}\r\n                />\r\n\r\n                <Metric\r\n                  className={classes.metric}\r\n                  label=\"Supply Wrapped\"\r\n                  valueItems={[{\r\n                    value: wStaSupply,\r\n                    suffix: 'wSTA',\r\n                  }]}\r\n                  progressPerc={wStaSupplyProgress}\r\n                />\r\n              </div>\r\n\r\n              <div className={cx(classes.volume, classes.card)}>\r\n                <Metric\r\n                  className={classes.metric}\r\n                  label=\"Volume (24h)\"\r\n                  valueItems={[{\r\n                    value: genFormattedNumber(stateraState.volume.inSta, 0),\r\n                    suffix: 'STA',\r\n                  }, {\r\n                    value: genFormattedNumber(stateraState.volume.inCurrency),\r\n                    suffix: 'USD',\r\n                  }]}\r\n                />\r\n              </div>\r\n\r\n              <div className={cx(classes.exchangeRate, classes.card)}>\r\n                <Metric\r\n                  className={classes.metric}\r\n                  label=\"Exchange Rate\"\r\n                >\r\n                  <div className={classes.exchangeRateRow}>\r\n                    <div className={classes.exchangeRateRowIcon}>\r\n                      <TokenIcon token=\"STA\" />\r\n                    </div>\r\n                    <div className={classes.exchangeRateRowText}>\r\n                      { `1 STA = ${genFormattedNumber(staExchangeRate, 2) } WSTA` }\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className={classes.exchangeRateRow}>\r\n                    <div className={classes.exchangeRateRowIcon}>\r\n                      <TokenIcon token=\"WSTA\" />\r\n                    </div>\r\n                    <div className={classes.exchangeRateRowText}>\r\n                      { `1 WSTA = ${genFormattedNumber(wStaExchangeRate, 2) } STA` }\r\n                    </div>\r\n                  </div>\r\n                </Metric>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return <Loader size='medium' />\r\n  }\r\n}\r\n\r\nexport default StaPage\r\n"]},"metadata":{},"sourceType":"module"}