{"ast":null,"code":"import axios from 'axios';\nimport _ from 'lodash';\nimport log from '../../util/log';\nimport { DateTime } from 'luxon';\nimport Big from 'big.js';\nexport const loadPool = () => async (dispatch, getState) => {\n  const contractAddress = getState().pool.contractAddress;\n  log.info('store:pool:load', contractAddress);\n  dispatch({\n    type: 'POOL_LOADING'\n  });\n  Promise.all([// getPrice(contractAddress),\n  // getStaSupply(contractAddress),\n  // getWStaSupply(contractAddress),\n  getChartData(contractAddress)]).then(_results => {\n    const anyErrors = _.some(_results, result => result.status === 'error');\n\n    log.info('store:statera:load:complete', _results, 'anyErrors?', anyErrors);\n\n    if (anyErrors) {\n      dispatch({\n        type: 'POOL_ERROR'\n      });\n    } else {\n      dispatch({\n        type: 'POOL_SUCCESS',\n        payload: _results\n      });\n    }\n  });\n}; // Price & volume\n// const getPrice = (contractAddress:string) => {\n//   return new Promise(resolve => {\n//     axios.get('https://api.coingecko.com/api/v3/coins/statera', {\n//       params: {\n//         localization: 'false',\n//         tickers: 'true',\n//         market_data: 'true',\n//         community_data: 'false',\n//         developer_data: 'false',\n//         sparkline: 'false',\n//       }\n//     })\n//     axios.get('https://api.coingecko.com/api/v3/coins/statera', {\n//       params: {\n//         localization: 'false',\n//         tickers: 'true',\n//         market_data: 'true',\n//         community_data: 'false',\n//         developer_data: 'false',\n//         sparkline: 'false',\n//       }\n//     })\n//       .then(_res => {\n//         const currentPrice = _res.data.market_data?.current_price?.usd\n//         const priceChangePerc = _res.data.market_data?.price_change_percentage_24h\n//         const priceChange = _res.data.market_data?.price_change_24h_in_currency?.usd\n//         const previousPrice = currentPrice + priceChange\n//         const tickers = _res.data.tickers\n//         const tickerData = tickers.find((item:any) => item.market.identifier === 'uniswap')\n//         const volumeInSta = tickerData.volume\n//         const volumeInCurrency = tickerData.converted_volume?.usd\n//         resolve({\n//           name: 'price',\n//           status: 'success',\n//           result: {\n//             currentPrice,\n//             priceChangePerc,\n//             priceChange,\n//             previousPrice,\n//             volumeInSta,\n//             volumeInCurrency,\n//           },\n//         })\n//       })\n//       .catch(_error => {\n//         resolve({\n//           name: 'price',\n//           status: 'error',\n//           result: _error\n//         })\n//       })\n//   })\n// }\n// Supply\n// const getStaSupply = () => {\n//   return new Promise(resolve => {\n//     axios.get('https://api.etherscan.io/api', {\n//       params: {\n//         module: 'stats',\n//         action: 'tokensupply',\n//         contractaddress: STA_CONTRACT_ADDRESS,\n//         apikey: process.env.REACT_APP_ETHERSCAN_API_KEY,\n//       }\n//     })\n//       .then(_res => {\n//         resolve({\n//           name: 'supply:sta',\n//           status: 'success',\n//           result: _res.data.result,\n//         })\n//       })\n//       .catch(_error => {\n//         resolve({\n//           name: 'supply:sta',\n//           status: 'error',\n//           result: _error\n//         })\n//       })\n//   })\n// }\n// const getWStaSupply = () => {\n//   return new Promise(resolve => {\n//     axios.get('https://api.etherscan.io/api', {\n//       params: {\n//         module: 'stats',\n//         action: 'tokensupply',\n//         contractaddress: WSTA_CONTRACT_ADDRESS,\n//         apikey: process.env.REACT_APP_ETHERSCAN_API_KEY,\n//       }\n//     })\n//       .then(_res => {\n//         resolve({\n//           name: 'supply:wsta',\n//           status: 'success',\n//           result: _res.data.result,\n//         })\n//       })\n//       .catch(_error => {\n//         resolve({\n//           name: 'supply:wsta',\n//           status: 'error',\n//           result: _error\n//         })\n//       })\n//   })\n// }\n// Chart\n\nconst getChartData = contractAddress => {\n  return new Promise(resolve => {\n    axios.post('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2', {\n      query: `\n        {\n          pairDayDatas(\n            where: { pairAddress: \"${contractAddress}\" }\n            orderBy:date\n            orderDirection:desc\n            first:365)\n            {\n              date\n              reserveUSD\n              dailyVolumeUSD\n            }\n        }\n      `\n    }).then(_res => {\n      let data = _res.data.data.pairDayDatas;\n      data.reverse();\n      console.log('data: ', data);\n      let volume = [];\n      let liquidity = [];\n      let feeReturns = [];\n      data.forEach(item => {\n        const date = DateTime.fromSeconds(item.date).toISO();\n        const parsedVolume = Big(item.dailyVolumeUSD).toNumber();\n        const parsedLiquidity = Big(item.reserveUSD).toNumber();\n        const parsedFeeReturns = Math.pow(parsedVolume * 0.003 / parsedLiquidity + 1, 365);\n        volume.push([date, parsedVolume]);\n        liquidity.push([date, parsedLiquidity]);\n        feeReturns.push([date, parsedFeeReturns]);\n      });\n\n      const day1ApyItems = _.takeRight(feeReturns, 1);\n\n      console.log('day1ApyItems: ', day1ApyItems);\n\n      const day7ApyItems = _.takeRight(feeReturns, 7);\n\n      const day30ApyItems = _.takeRight(feeReturns, 30);\n\n      resolve({\n        name: 'chart',\n        status: 'success',\n        result: {\n          chart: {\n            volume,\n            liquidity,\n            feeReturns\n          },\n          apy: {\n            day1: day1ApyItems[0][1],\n            day7: _.meanBy(day7ApyItems, item => item[1]),\n            day30: _.meanBy(day30ApyItems, item => item[1])\n          }\n        }\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'chart',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/store/actions/pool.ts"],"names":["axios","_","log","DateTime","Big","loadPool","dispatch","getState","contractAddress","pool","info","type","Promise","all","getChartData","then","_results","anyErrors","some","result","status","payload","resolve","post","query","_res","data","pairDayDatas","reverse","console","volume","liquidity","feeReturns","forEach","item","date","fromSeconds","toISO","parsedVolume","dailyVolumeUSD","toNumber","parsedLiquidity","reserveUSD","parsedFeeReturns","Math","pow","push","day1ApyItems","takeRight","day7ApyItems","day30ApyItems","name","chart","apy","day1","day7","meanBy","day30","catch","_error"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { Dispatch } from 'redux'\r\nimport _ from 'lodash'\r\nimport log from '../../util/log'\r\nimport { DateTime } from 'luxon'\r\nimport Big from 'big.js'\r\n\r\nexport const loadPool = () => async (dispatch:Dispatch, getState:any) => {\r\n  const contractAddress:string = getState().pool.contractAddress\r\n  log.info('store:pool:load', contractAddress)\r\n  dispatch({ type: 'POOL_LOADING' })\r\n\r\n  Promise.all([\r\n    // getPrice(contractAddress),\r\n    // getStaSupply(contractAddress),\r\n    // getWStaSupply(contractAddress),\r\n    getChartData(contractAddress),\r\n  ])\r\n    .then(_results => {\r\n      const anyErrors = _.some(_results, (result:any) => result.status === 'error')\r\n      log.info('store:statera:load:complete', _results, 'anyErrors?', anyErrors)\r\n\r\n      if (anyErrors) {\r\n        dispatch({ type: 'POOL_ERROR' })\r\n      } else {\r\n        dispatch({ type: 'POOL_SUCCESS', payload: _results })\r\n      }\r\n    })\r\n}\r\n\r\n\r\n// Price & volume\r\n\r\n// const getPrice = (contractAddress:string) => {\r\n//   return new Promise(resolve => {\r\n//     axios.get('https://api.coingecko.com/api/v3/coins/statera', {\r\n//       params: {\r\n//         localization: 'false',\r\n//         tickers: 'true',\r\n//         market_data: 'true',\r\n//         community_data: 'false',\r\n//         developer_data: 'false',\r\n//         sparkline: 'false',\r\n//       }\r\n//     })\r\n\r\n\r\n//     axios.get('https://api.coingecko.com/api/v3/coins/statera', {\r\n//       params: {\r\n//         localization: 'false',\r\n//         tickers: 'true',\r\n//         market_data: 'true',\r\n//         community_data: 'false',\r\n//         developer_data: 'false',\r\n//         sparkline: 'false',\r\n//       }\r\n//     })\r\n//       .then(_res => {\r\n//         const currentPrice = _res.data.market_data?.current_price?.usd\r\n//         const priceChangePerc = _res.data.market_data?.price_change_percentage_24h\r\n//         const priceChange = _res.data.market_data?.price_change_24h_in_currency?.usd\r\n//         const previousPrice = currentPrice + priceChange\r\n\r\n//         const tickers = _res.data.tickers\r\n//         const tickerData = tickers.find((item:any) => item.market.identifier === 'uniswap')\r\n//         const volumeInSta = tickerData.volume\r\n//         const volumeInCurrency = tickerData.converted_volume?.usd\r\n\r\n\r\n//         resolve({\r\n//           name: 'price',\r\n//           status: 'success',\r\n//           result: {\r\n//             currentPrice,\r\n//             priceChangePerc,\r\n//             priceChange,\r\n//             previousPrice,\r\n//             volumeInSta,\r\n//             volumeInCurrency,\r\n//           },\r\n//         })\r\n//       })\r\n//       .catch(_error => {\r\n//         resolve({\r\n//           name: 'price',\r\n//           status: 'error',\r\n//           result: _error\r\n//         })\r\n//       })\r\n//   })\r\n// }\r\n\r\n\r\n// Supply\r\n\r\n// const getStaSupply = () => {\r\n//   return new Promise(resolve => {\r\n//     axios.get('https://api.etherscan.io/api', {\r\n//       params: {\r\n//         module: 'stats',\r\n//         action: 'tokensupply',\r\n//         contractaddress: STA_CONTRACT_ADDRESS,\r\n//         apikey: process.env.REACT_APP_ETHERSCAN_API_KEY,\r\n//       }\r\n//     })\r\n//       .then(_res => {\r\n//         resolve({\r\n//           name: 'supply:sta',\r\n//           status: 'success',\r\n//           result: _res.data.result,\r\n//         })\r\n//       })\r\n//       .catch(_error => {\r\n//         resolve({\r\n//           name: 'supply:sta',\r\n//           status: 'error',\r\n//           result: _error\r\n//         })\r\n//       })\r\n//   })\r\n// }\r\n\r\n// const getWStaSupply = () => {\r\n//   return new Promise(resolve => {\r\n//     axios.get('https://api.etherscan.io/api', {\r\n//       params: {\r\n//         module: 'stats',\r\n//         action: 'tokensupply',\r\n//         contractaddress: WSTA_CONTRACT_ADDRESS,\r\n//         apikey: process.env.REACT_APP_ETHERSCAN_API_KEY,\r\n//       }\r\n//     })\r\n//       .then(_res => {\r\n//         resolve({\r\n//           name: 'supply:wsta',\r\n//           status: 'success',\r\n//           result: _res.data.result,\r\n//         })\r\n//       })\r\n//       .catch(_error => {\r\n//         resolve({\r\n//           name: 'supply:wsta',\r\n//           status: 'error',\r\n//           result: _error\r\n//         })\r\n//       })\r\n//   })\r\n// }\r\n\r\n\r\n// Chart\r\n\r\nconst getChartData = (contractAddress:string) => {\r\n  return new Promise(resolve => {\r\n    axios.post('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2', {\r\n      query: `\r\n        {\r\n          pairDayDatas(\r\n            where: { pairAddress: \"${contractAddress}\" }\r\n            orderBy:date\r\n            orderDirection:desc\r\n            first:365)\r\n            {\r\n              date\r\n              reserveUSD\r\n              dailyVolumeUSD\r\n            }\r\n        }\r\n      `\r\n    })\r\n      .then(_res => {\r\n        let data = _res.data.data.pairDayDatas\r\n        data.reverse()\r\n        console.log('data: ', data);\r\n\r\n        let volume:any = []\r\n        let liquidity:any = []\r\n        let feeReturns:any = []\r\n\r\n        data.forEach((item:any) => {\r\n          const date = DateTime.fromSeconds(item.date).toISO()\r\n          const parsedVolume = Big(item.dailyVolumeUSD).toNumber()\r\n          const parsedLiquidity = Big(item.reserveUSD).toNumber()\r\n          const parsedFeeReturns = Math.pow((((parsedVolume * 0.003) / parsedLiquidity) + 1), 365)\r\n\r\n          volume.push([\r\n            date,\r\n            parsedVolume,\r\n          ])\r\n\r\n          liquidity.push([\r\n            date,\r\n            parsedLiquidity,\r\n          ])\r\n\r\n          feeReturns.push([\r\n            date,\r\n            parsedFeeReturns,\r\n          ])\r\n        })\r\n\r\n        const day1ApyItems:any = _.takeRight(feeReturns, 1)\r\n        console.log('day1ApyItems: ', day1ApyItems);\r\n        const day7ApyItems:any = _.takeRight(feeReturns, 7)\r\n        const day30ApyItems:any = _.takeRight(feeReturns, 30)\r\n\r\n        resolve({\r\n          name: 'chart',\r\n          status: 'success',\r\n          result: {\r\n            chart: {\r\n              volume,\r\n              liquidity,\r\n              feeReturns,\r\n            },\r\n            apy: {\r\n              day1: day1ApyItems[0][1],\r\n              day7: _.meanBy(day7ApyItems, (item:any) => item[1]),\r\n              day30: _.meanBy(day30ApyItems, (item:any) => item[1]),\r\n            },\r\n          },\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'chart',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}