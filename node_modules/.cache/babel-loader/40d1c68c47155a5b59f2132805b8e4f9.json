{"ast":null,"code":"import _ from 'lodash';\nimport { resolvePoolFromContractAddress } from '../../util/resolvePool';\nconst INITIAL_STATE = {\n  name: null,\n  contractAddress: null,\n  assets: null,\n  data: {\n    assetValue: null,\n    liquidity: null,\n    volume: null,\n    feesEarned: null,\n    feesApy: null,\n    liquidityProviderCount: null\n  },\n  meta: {\n    success: false,\n    loading: false,\n    error: false,\n    errorMessage: null\n  }\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'SET_MULTI_POOL':\n      {\n        const contractAddress = action.payload.contractAddress;\n        const {\n          name,\n          assets\n        } = resolvePoolFromContractAddress(contractAddress);\n\n        if (name) {\n          return Object.assign({}, INITIAL_STATE, {\n            name,\n            assets,\n            contractAddress: contractAddress\n          });\n        } else {\n          return Object.assign({}, INITIAL_STATE, {\n            meta: {\n              error: true,\n              errorMessage: `No pool found for contract address: ${contractAddress}`\n            }\n          });\n        }\n      }\n\n    case 'RESET_MULTI_POOL':\n      {\n        return INITIAL_STATE;\n      }\n\n    case 'MULTI_POOL_LOADING':\n      {\n        return { ...state,\n          meta: _.merge({}, INITIAL_STATE.meta, {\n            loading: true\n          })\n        };\n      }\n\n    case 'MULTI_POOL_SUCCESS':\n      {\n        const _results = action.payload;\n\n        const dataResult = _results.find(result => result.name === 'data').result;\n\n        return { ...state,\n          data: { ...dataResult\n          },\n          meta: _.merge({}, INITIAL_STATE.meta, {\n            success: true\n          })\n        };\n      }\n\n    case 'MULTI_POOL_ERROR':\n      {\n        return { ...state,\n          data: INITIAL_STATE.data,\n          meta: _.merge({}, INITIAL_STATE.meta, {\n            error: true\n          })\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/store/reducers/multiPool.ts"],"names":["_","resolvePoolFromContractAddress","INITIAL_STATE","name","contractAddress","assets","data","assetValue","liquidity","volume","feesEarned","feesApy","liquidityProviderCount","meta","success","loading","error","errorMessage","state","action","type","payload","Object","assign","merge","_results","dataResult","find","result"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,8BAAT,QAA+C,wBAA/C;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAE,IADc;AAEpBC,EAAAA,eAAe,EAAE,IAFG;AAGpBC,EAAAA,MAAM,EAAE,IAHY;AAIpBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,IADR;AAEJC,IAAAA,SAAS,EAAE,IAFP;AAGJC,IAAAA,MAAM,EAAE,IAHJ;AAIJC,IAAAA,UAAU,EAAE,IAJR;AAKJC,IAAAA,OAAO,EAAE,IALL;AAMJC,IAAAA,sBAAsB,EAAE;AANpB,GAJc;AAYpBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,KADL;AAEJC,IAAAA,OAAO,EAAE,KAFL;AAGJC,IAAAA,KAAK,EAAE,KAHH;AAIJC,IAAAA,YAAY,EAAE;AAJV;AAZc,CAAtB;AAoBA,gBAAe,CAACC,KAAK,GAAGhB,aAAT,EAAwBiB,MAAxB,KAAuC;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEC,SAAK,gBAAL;AAAuB;AACnB,cAAMhB,eAAe,GAAGe,MAAM,CAACE,OAAP,CAAejB,eAAvC;AACA,cAAM;AAAED,UAAAA,IAAF;AAAQE,UAAAA;AAAR,YAAmBJ,8BAA8B,CAACG,eAAD,CAAvD;;AAEA,YAAID,IAAJ,EAAU;AACR,iBAAOmB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,aAAlB,EAAiC;AACtCC,YAAAA,IADsC;AAEtCE,YAAAA,MAFsC;AAGtCD,YAAAA,eAAe,EAAEA;AAHqB,WAAjC,CAAP;AAKD,SAND,MAMO;AACL,iBAAOkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,aAAlB,EAAiC;AACtCW,YAAAA,IAAI,EAAE;AACJG,cAAAA,KAAK,EAAE,IADH;AAEJC,cAAAA,YAAY,EAAG,uCAAsCb,eAAgB;AAFjE;AADgC,WAAjC,CAAP;AAMD;AACF;;AAED,SAAK,kBAAL;AAAyB;AAC1B,eAAOF,aAAP;AACE;;AAEH,SAAK,oBAAL;AAA2B;AAC1B,eAAO,EACF,GAAGgB,KADD;AAEFL,UAAAA,IAAI,EAAEb,CAAC,CAACwB,KAAF,CAAQ,EAAR,EAAYtB,aAAa,CAACW,IAA1B,EAAgC;AACpCE,YAAAA,OAAO,EAAE;AAD2B,WAAhC;AAFJ,SAAP;AAME;;AAED,SAAK,oBAAL;AAA2B;AACzB,cAAMU,QAAQ,GAAGN,MAAM,CAACE,OAAxB;;AACA,cAAMK,UAAU,GAAGD,QAAQ,CAACE,IAAT,CAAeC,MAAD,IAAgBA,MAAM,CAACzB,IAAP,KAAgB,MAA9C,EAAsDyB,MAAzE;;AAEH,eAAO,EACF,GAAGV,KADD;AAEFZ,UAAAA,IAAI,EAAE,EACJ,GAAGoB;AADC,WAFJ;AAKFb,UAAAA,IAAI,EAAEb,CAAC,CAACwB,KAAF,CAAQ,EAAR,EAAYtB,aAAa,CAACW,IAA1B,EAAgC;AACpCC,YAAAA,OAAO,EAAE;AAD2B,WAAhC;AALJ,SAAP;AASE;;AAED,SAAK,kBAAL;AAAyB;AAC1B,eAAO,EACF,GAAGI,KADD;AAEFZ,UAAAA,IAAI,EAAEJ,aAAa,CAACI,IAFlB;AAGFO,UAAAA,IAAI,EAAEb,CAAC,CAACwB,KAAF,CAAQ,EAAR,EAAYtB,aAAa,CAACW,IAA1B,EAAgC;AACpCG,YAAAA,KAAK,EAAE;AAD6B,WAAhC;AAHJ,SAAP;AAOE;;AAEH;AAAS;AACR,eAAOE,KAAP;AACE;AA9DJ;AAgEA,CAjED","sourcesContent":["import _ from 'lodash'\r\nimport { resolvePoolFromContractAddress } from '../../util/resolvePool'\r\n\r\nconst INITIAL_STATE = {\r\n  name: null,\r\n  contractAddress: null,\r\n  assets: null,\r\n  data: {\r\n    assetValue: null,\r\n    liquidity: null,\r\n    volume: null,\r\n    feesEarned: null,\r\n    feesApy: null,\r\n    liquidityProviderCount: null,\r\n  },\r\n  meta: {\r\n    success: false,\r\n    loading: false,\r\n    error: false,\r\n    errorMessage: null,\r\n  },\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action:any) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase 'SET_MULTI_POOL': {\r\n      const contractAddress = action.payload.contractAddress\r\n      const { name, assets } = resolvePoolFromContractAddress(contractAddress)\r\n\r\n      if (name) {\r\n        return Object.assign({}, INITIAL_STATE, {\r\n          name,\r\n          assets,\r\n          contractAddress: contractAddress,\r\n        })\r\n      } else {\r\n        return Object.assign({}, INITIAL_STATE, {\r\n          meta: {\r\n            error: true,\r\n            errorMessage: `No pool found for contract address: ${contractAddress}`\r\n          },\r\n        })\r\n      }\r\n    }\r\n\r\n    case 'RESET_MULTI_POOL': {\r\n\t\t\treturn INITIAL_STATE\r\n    }\r\n\r\n\t\tcase 'MULTI_POOL_LOADING': {\r\n\t\t\treturn {\r\n        ...state,\r\n        meta: _.merge({}, INITIAL_STATE.meta, {\r\n          loading: true,\r\n        })\r\n      }\r\n    }\r\n\r\n    case 'MULTI_POOL_SUCCESS': {\r\n      const _results = action.payload\r\n      const dataResult = _results.find((result:any) => result.name === 'data').result\r\n\r\n\t\t\treturn {\r\n        ...state,\r\n        data: {\r\n          ...dataResult,\r\n        },\r\n        meta: _.merge({}, INITIAL_STATE.meta, {\r\n          success: true,\r\n        })\r\n      }\r\n    }\r\n\r\n    case 'MULTI_POOL_ERROR': {\r\n\t\t\treturn {\r\n        ...state,\r\n        data: INITIAL_STATE.data,\r\n        meta: _.merge({}, INITIAL_STATE.meta, {\r\n          error: true,\r\n        })\r\n      }\r\n    }\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n    }\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}