{"ast":null,"code":"import _ from 'lodash';\nimport { resolvePoolFromContractAddress } from '../../util/resolvePool';\nconst INITIAL_STATE = {\n  name: null,\n  contractAddress: null,\n  assets: null,\n  data: {\n    price: {\n      current: null,\n      previous: null,\n      change: null,\n      changePerc: null\n    },\n    chart: {\n      volume: null,\n      liquidity: null,\n      feeReturns: null\n    },\n    apy: {\n      day1: null,\n      day7: null,\n      day30: null\n    }\n  },\n  meta: {\n    success: false,\n    loading: false,\n    error: false,\n    errorMessage: null\n  }\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'SET_POOL':\n      {\n        const contractAddress = action.payload.contractAddress;\n        const {\n          name,\n          assets\n        } = resolvePoolFromContractAddress(contractAddress);\n\n        if (name) {\n          return Object.assign({}, INITIAL_STATE, {\n            name,\n            assets,\n            contractAddress: contractAddress\n          });\n        } else {\n          return Object.assign({}, INITIAL_STATE, {\n            meta: {\n              error: true,\n              errorMessage: `No pool found for contract address: ${contractAddress}`\n            }\n          });\n        }\n      }\n\n    case 'RESET_POOL':\n      {\n        return INITIAL_STATE;\n      }\n\n    case 'POOL_LOADING':\n      {\n        return { ...state,\n          meta: _.merge({}, INITIAL_STATE.meta, {\n            loading: true\n          })\n        };\n      }\n\n    case 'POOL_SUCCESS':\n      {\n        const _results = action.payload;\n\n        const chartResult = _results.find(result => result.name === 'chart').result;\n\n        return { ...state,\n          data: {\n            chart: {\n              volume: chartResult.chart.volume,\n              liquidity: chartResult.chart.liquidity,\n              feeReturns: chartResult.chart.feeReturns\n            },\n            apy: {\n              day1: chartResult.apy.day1,\n              day7: chartResult.apy.day7,\n              day30: chartResult.apy.day30\n            }\n          },\n          meta: _.merge({}, INITIAL_STATE.meta, {\n            success: true\n          })\n        };\n      }\n\n    case 'POOL_ERROR':\n      {\n        return { ...state,\n          data: INITIAL_STATE.data,\n          meta: _.merge({}, INITIAL_STATE.meta, {\n            error: true\n          })\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/store/reducers/pool.ts"],"names":["_","resolvePoolFromContractAddress","INITIAL_STATE","name","contractAddress","assets","data","price","current","previous","change","changePerc","chart","volume","liquidity","feeReturns","apy","day1","day7","day30","meta","success","loading","error","errorMessage","state","action","type","payload","Object","assign","merge","_results","chartResult","find","result"],"mappings":"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","sourcesContent":["import { STA_TOTAL_SUPPLY } from '../../Constants/Constants'\r\nimport Big from 'big.js'\r\nimport { DateTime } from 'luxon'\r\nimport { POOLS } from '../../Constants/Constants'\r\nimport _ from 'lodash'\r\nimport { resolvePoolFromContractAddress } from '../../util/resolvePool'\r\n\r\nconst INITIAL_STATE = {\r\n  name: null,\r\n  contractAddress: null,\r\n  assets: null,\r\n  data: {\r\n    price: {\r\n      current: null,\r\n      previous: null,\r\n      change: null,\r\n      changePerc: null,\r\n    },\r\n    chart: {\r\n      volume: null,\r\n      liquidity: null,\r\n      feeReturns: null,\r\n    },\r\n    apy: {\r\n      day1: null,\r\n      day7: null,\r\n      day30: null,\r\n    },\r\n  },\r\n  meta: {\r\n    success: false,\r\n    loading: false,\r\n    error: false,\r\n    errorMessage: null,\r\n  },\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action:any) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase 'SET_POOL': {\r\n      const contractAddress = action.payload.contractAddress\r\n      const { name, assets } = resolvePoolFromContractAddress(contractAddress)\r\n\r\n      if (name) {\r\n        return Object.assign({}, INITIAL_STATE, {\r\n          name,\r\n          assets,\r\n          contractAddress: contractAddress,\r\n        })\r\n      } else {\r\n        return Object.assign({}, INITIAL_STATE, {\r\n          meta: {\r\n            error: true,\r\n            errorMessage: `No pool found for contract address: ${contractAddress}`\r\n          },\r\n        })\r\n      }\r\n    }\r\n\r\n    case 'RESET_POOL': {\r\n\t\t\treturn INITIAL_STATE\r\n    }\r\n\r\n\t\tcase 'POOL_LOADING': {\r\n\t\t\treturn {\r\n        ...state,\r\n        meta: _.merge({}, INITIAL_STATE.meta, {\r\n          loading: true,\r\n        })\r\n      }\r\n    }\r\n\r\n    case 'POOL_SUCCESS': {\r\n      const _results = action.payload\r\n      const chartResult = _results.find((result:any) => result.name === 'chart').result\r\n\r\n\t\t\treturn {\r\n        ...state,\r\n        data: {\r\n          chart: {\r\n            volume: chartResult.chart.volume,\r\n            liquidity: chartResult.chart.liquidity,\r\n            feeReturns: chartResult.chart.feeReturns,\r\n          },\r\n          apy: {\r\n            day1: chartResult.apy.day1,\r\n            day7: chartResult.apy.day7,\r\n            day30: chartResult.apy.day30,\r\n          },\r\n        },\r\n        meta: _.merge({}, INITIAL_STATE.meta, {\r\n          success: true,\r\n        })\r\n      }\r\n    }\r\n\r\n    case 'POOL_ERROR': {\r\n\t\t\treturn {\r\n        ...state,\r\n        data: INITIAL_STATE.data,\r\n        meta: _.merge({}, INITIAL_STATE.meta, {\r\n          error: true,\r\n        })\r\n      }\r\n    }\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n    }\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}