{"ast":null,"code":"import axios from 'axios';\nimport _ from 'lodash';\nimport log from '../../util/log';\nexport const loadMultiPool = () => async (dispatch, getState) => {\n  const contractAddress = getState().multiPool.contractAddress;\n  log.info('store:multiPool:load', contractAddress);\n  dispatch({\n    type: 'MULTI_POOL_LOADING'\n  });\n  Promise.all([getData(contractAddress) // Leaving space here for future chart data calls\n  ]).then(_results => {\n    const anyErrors = _.some(_results, result => result.status === 'error');\n\n    log.info('store:statera:load:complete', _results, 'anyErrors?', anyErrors);\n\n    if (anyErrors) {\n      dispatch({\n        type: 'MULTI_POOL_ERROR'\n      });\n    } else {\n      dispatch({\n        type: 'MULTI_POOL_SUCCESS',\n        payload: _results\n      });\n    }\n  });\n}; // Chart\n\nconst getData = contractAddress => {\n  return new Promise(resolve => {\n    axios.post('https://api.thegraph.com/subgraphs/name/balancer-labs/balancer', {\n      query: `\n        {\n          pool(id: \"${contractAddress}\") {\n            id\n            swapFee\n            totalShares\n            liquidity\n            totalSwapVolume\n            holdersCount\n            swapFee\n            swaps (first: 1,orderBy: timestamp,orderDirection: desc, where: {timestamp_lt: ${Math.floor(Date.now() / 1000) - 86400}}) {\n              poolTotalSwapVolume\n            }\n          }\n        }\n      `\n    }).then(_res => {\n      var _res$data, _res$data$data, _data$swaps$;\n\n      const data = _res === null || _res === void 0 ? void 0 : (_res$data = _res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.pool;\n      log.info('multiPool:getData:success', _res.data.data);\n      const liquidity = Number(data.liquidity);\n      const volume = data.totalSwapVolume - ((_data$swaps$ = data.swaps[0]) === null || _data$swaps$ === void 0 ? void 0 : _data$swaps$.poolTotalSwapVolume);\n      const assetValue = liquidity / data.totalShares;\n      const feesEarned = volume * data.swapFee;\n      const feesApy = Math.pow(feesEarned / liquidity + 1, 365) - 1;\n      resolve({\n        name: 'data',\n        status: 'success',\n        result: {\n          assetValue,\n          liquidity,\n          volume,\n          feesEarned,\n          feesApy,\n          liquidityProviderCount: Number(data.holdersCount)\n        }\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'data',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/store/actions/multiPool.ts"],"names":["axios","_","log","loadMultiPool","dispatch","getState","contractAddress","multiPool","info","type","Promise","all","getData","then","_results","anyErrors","some","result","status","payload","resolve","post","query","Math","floor","Date","now","_res","data","pool","liquidity","Number","volume","totalSwapVolume","swaps","poolTotalSwapVolume","assetValue","totalShares","feesEarned","swapFee","feesApy","pow","name","liquidityProviderCount","holdersCount","catch","_error"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { Dispatch } from 'redux'\r\nimport _ from 'lodash'\r\nimport log from '../../util/log'\r\nimport { DateTime } from 'luxon'\r\nimport Big from 'big.js'\r\n\r\nexport const loadMultiPool = () => async (dispatch:Dispatch, getState:any) => {\r\n  const contractAddress:string = getState().multiPool.contractAddress\r\n  log.info('store:multiPool:load', contractAddress)\r\n  dispatch({ type: 'MULTI_POOL_LOADING' })\r\n\r\n  Promise.all([\r\n    getData(contractAddress),\r\n    // Leaving space here for future chart data calls\r\n  ])\r\n    .then(_results => {\r\n      const anyErrors = _.some(_results, (result:any) => result.status === 'error')\r\n      log.info('store:statera:load:complete', _results, 'anyErrors?', anyErrors)\r\n\r\n      if (anyErrors) {\r\n        dispatch({ type: 'MULTI_POOL_ERROR' })\r\n      } else {\r\n        dispatch({ type: 'MULTI_POOL_SUCCESS', payload: _results })\r\n      }\r\n    })\r\n}\r\n\r\n\r\n// Chart\r\n\r\nconst getData = (contractAddress:string) => {\r\n  return new Promise(resolve => {\r\n    axios.post('https://api.thegraph.com/subgraphs/name/balancer-labs/balancer', {\r\n      query: `\r\n        {\r\n          pool(id: \"${contractAddress}\") {\r\n            id\r\n            swapFee\r\n            totalShares\r\n            liquidity\r\n            totalSwapVolume\r\n            holdersCount\r\n            swapFee\r\n            swaps (first: 1,orderBy: timestamp,orderDirection: desc, where: {timestamp_lt: ${Math.floor(Date.now() / 1000) - 86400}}) {\r\n              poolTotalSwapVolume\r\n            }\r\n          }\r\n        }\r\n      `\r\n    })\r\n      .then(_res => {\r\n        const data = _res?.data?.data?.pool\r\n        log.info('multiPool:getData:success', _res.data.data)\r\n\r\n        const liquidity = Number(data.liquidity)\r\n        const volume = data.totalSwapVolume - data.swaps[0]?.poolTotalSwapVolume\r\n        const assetValue = liquidity / data.totalShares\r\n        const feesEarned = volume * data.swapFee\r\n        const feesApy = (Math.pow(((feesEarned / liquidity) + 1), 365)) -1\r\n\r\n        resolve({\r\n          name: 'data',\r\n          status: 'success',\r\n          result: {\r\n            assetValue,\r\n            liquidity,\r\n            volume,\r\n            feesEarned,\r\n            feesApy,\r\n            liquidityProviderCount: Number(data.holdersCount),\r\n          },\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'data',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}