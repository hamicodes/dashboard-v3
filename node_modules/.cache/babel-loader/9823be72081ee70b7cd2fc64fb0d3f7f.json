{"ast":null,"code":"var _jsxFileName = \"/Users/nco/Documents/GitHub/dashboard/src/pages/MultiPoolPage.tsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadMultiPool } from '../store/actions/multiPool';\nimport PageHeader from '../Components/PageHeader/PageHeader';\nimport classes from './PoolPage.module.scss';\nimport Metric from '../Components/Metric/Metric';\nimport { genFormattedNumber } from '../util/numberFormat';\nimport { Chart } from 'react-google-charts';\nimport Loader from '../Components/Loader/Loader';\nimport SegmentedTabs from '../Components/SegmentedTabs/SegmentedTabs';\nimport cx from 'classnames';\nimport _ from 'lodash';\nimport BalApyMetric from '../Components/BalApyMetric/BalApyMetric';\n\nconst MultiPoolPage = () => {\n  const [chartType, setChartType] = useState('assetPrice');\n  const [chartTimePeriod, setChartTimePeriod] = useState('30_day');\n  const mounted = useRef();\n  const params = useParams();\n  const contractAddress = params.contract_address;\n  const dispatch = useDispatch();\n  const multiPoolState = useSelector(state => state.multiPool);\n  useEffect(() => {\n    if (!mounted.current) {\n      // do componentDidMount logic\n      dispatch({\n        type: 'SET_MULTI_POOL',\n        payload: {\n          contractAddress\n        }\n      });\n      dispatch(loadMultiPool());\n      mounted.current = true;\n    } else {\n      // do componentDidUpdate logic\n      if (contractAddress && contractAddress !== multiPoolState.contractAddress) {\n        dispatch({\n          type: 'RESET_MULTI_POOL'\n        });\n        dispatch({\n          type: 'SET_MULTI_POOL',\n          payload: {\n            contractAddress\n          }\n        });\n        dispatch(loadMultiPool());\n      }\n    }\n  });\n\n  const handleChartTypeTab = value => {\n    setChartType(value);\n  };\n\n  const handleChartTimePeriodTab = value => {\n    setChartTimePeriod(value);\n  };\n\n  if (multiPoolState.meta.success) {\n    // // Transform chart data by period\n    // let timePeriod\n    // switch (chartTimePeriod) {\n    //   case \"7_day\": {\n    //     timePeriod = 7\n    //     break;\n    //   }\n    //   case \"30_day\": {\n    //     timePeriod = 30\n    //     break;\n    //   }\n    //   case \"365_day\": {\n    //     timePeriod = 365\n    //     break;\n    //   }\n    // }\n    let chartData;\n    let chartLeftMargin;\n\n    switch (chartType) {\n      case 'assetPrice':\n        {\n          chartData = [['Datetime', 'Asset Price'], ...multiPoolState.data.chart.assetPrice];\n          chartLeftMargin = 50;\n          break;\n        }\n\n      case 'volume':\n        {\n          chartData = [['Datetime', 'Volume'], ...multiPoolState.data.chart.volume];\n          chartLeftMargin = 70;\n          break;\n        }\n\n      case 'liquidity':\n        {\n          chartData = [['Datetime', 'Liquidity'], ...multiPoolState.data.chart.liquidity];\n          chartLeftMargin = 80;\n          break;\n        }\n\n      case 'feeReturns':\n        {\n          chartData = [['Datetime', 'Fee Returns'], ...multiPoolState.data.chart.feeReturns];\n          chartLeftMargin = 40;\n          break;\n        }\n    } // Get most recent and second most recent price array\n\n\n    const priceArray0 = _.takeRight(multiPoolState.data.chart.assetPrice, 1)[0];\n\n    const price0 = priceArray0[1];\n\n    const priceArray1 = _.takeRight(multiPoolState.data.chart.assetPrice, 2)[0];\n\n    const price1 = priceArray1[1];\n    const percChange = (price0 - price1) / price1 * 100;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PageHeader, {\n      title: multiPoolState.name,\n      price: genFormattedNumber(price0, 2),\n      priceChangePerc: genFormattedNumber(percChange, 2),\n      percChange: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardLeft,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.chartCard, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      width: '100%',\n      height: '100%',\n      chartType: chartType === 'assetPrice' ? 'LineChart' : 'ColumnChart',\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }\n      }, \"Loading Chart\"),\n      data: chartData,\n      options: {\n        legend: 'none',\n        chartArea: {\n          left: chartLeftMargin,\n          top: 20,\n          width: '90%',\n          height: '90%'\n        },\n        colors: ['#848ca9'],\n        hAxis: {\n          textPosition: 'none',\n          gridlines: {\n            color: 'transparent'\n          },\n          textStyle: {\n            fontName: 'Inter',\n            fontSize: 13,\n            fontWeight: 600,\n            color: '#595e78'\n          }\n        },\n        vAxis: {\n          format: chartType === 'feeReturns' ? '#,###%' : '$#,###',\n          gridlines: {\n            color: '#e6e6f0'\n          },\n          minorGridlines: {\n            color: 'transparent'\n          },\n          textStyle: {\n            fontName: 'Inter',\n            fontSize: 13,\n            fontWeight: 600,\n            color: '#595e78'\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.chartActions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.typeTabContainer,\n      style: {\n        maxWidth: '380px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(SegmentedTabs, {\n      items: [{\n        text: 'Asset Price',\n        value: 'assetPrice'\n      }, {\n        text: 'Volume',\n        value: 'volume'\n      }, {\n        text: 'Liquidity',\n        value: 'liquidity'\n      }, {\n        text: 'Fee Returns',\n        value: 'feeReturns'\n      }],\n      value: chartType,\n      onInput: handleChartTypeTab,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.threeGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Holder Count\",\n      valueItems: [{\n        value: multiPoolState.data.liquidityProviderCount\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Asset Value\",\n      valueItems: [{\n        prefix: '$',\n        value: genFormattedNumber(multiPoolState.data.assetValue, 0),\n        suffix: 'USD'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"Liquidity\",\n      valueItems: [{\n        prefix: '$',\n        value: genFormattedNumber(multiPoolState.data.liquidity, 0),\n        suffix: 'USD'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"24H Volume\",\n      valueItems: [{\n        prefix: '$',\n        value: genFormattedNumber(multiPoolState.data.volume, 0),\n        suffix: 'USD'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"24H Fees Earned\",\n      valueItems: [{\n        prefix: '$',\n        value: genFormattedNumber(multiPoolState.data.feesEarned, 2),\n        suffix: 'USD'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Metric, {\n      className: classes.metric,\n      label: \"24H Fees APY\",\n      valueItems: [{\n        value: genFormattedNumber(multiPoolState.data.feesApy * 100, 2),\n        suffix: '%'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 19\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.cardTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }\n    }, \"Assets\"), /*#__PURE__*/React.createElement(Chart, {\n      width: '100%',\n      height: '200px',\n      chartType: \"PieChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 27\n        }\n      }, \"Loading Chart\"),\n      data: [['Asset', 'Ratio'], ...multiPoolState.assets.map(item => [item.ticker, item.proportion])],\n      options: {\n        chartArea: {\n          left: 0,\n          top: 10,\n          width: '100%',\n          height: '90%'\n        },\n        legend: 'none',\n        pieSliceText: 'label',\n        fontSize: 13,\n        fontName: 'Inter',\n        tooltip: {\n          trigger: 'selection'\n        },\n        colors: multiPoolState.assets.map(item => item.brandColor)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(BalApyMetric, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.wallet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 12\n      }\n    });\n  }\n};\n\nexport default MultiPoolPage;","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/pages/MultiPoolPage.tsx"],"names":["React","useEffect","useRef","useState","useParams","useDispatch","useSelector","loadMultiPool","PageHeader","classes","Metric","genFormattedNumber","Chart","Loader","SegmentedTabs","cx","_","BalApyMetric","MultiPoolPage","chartType","setChartType","chartTimePeriod","setChartTimePeriod","mounted","params","contractAddress","contract_address","dispatch","multiPoolState","state","multiPool","current","type","payload","handleChartTypeTab","value","handleChartTimePeriodTab","meta","success","chartData","chartLeftMargin","data","chart","assetPrice","volume","liquidity","feeReturns","priceArray0","takeRight","price0","priceArray1","price1","percChange","container","dashboardContainer","name","dashboard","dashboardLeft","chartCard","card","chartContainer","legend","chartArea","left","top","width","height","colors","hAxis","textPosition","gridlines","color","textStyle","fontName","fontSize","fontWeight","vAxis","format","minorGridlines","chartActions","typeTabContainer","maxWidth","text","threeGrid","metric","liquidityProviderCount","prefix","assetValue","suffix","feesEarned","feesApy","dashboardRight","cardTitle","assets","map","item","ticker","proportion","pieSliceText","tooltip","trigger","brandColor","wallet"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadMultiPool } from '../store/actions/multiPool'\r\nimport PageHeader from '../Components/PageHeader/PageHeader'\r\nimport classes from './PoolPage.module.scss'\r\nimport Metric from '../Components/Metric/Metric'\r\nimport { genFormattedNumber } from '../util/numberFormat'\r\nimport { Chart } from 'react-google-charts'\r\nimport Loader from '../Components/Loader/Loader'\r\nimport SegmentedTabs from '../Components/SegmentedTabs/SegmentedTabs'\r\nimport cx from 'classnames'\r\nimport _ from 'lodash'\r\nimport BalApyMetric from '../Components/BalApyMetric/BalApyMetric'\r\n\r\nconst MultiPoolPage: FunctionComponent = () => {\r\n  const [chartType, setChartType] = useState('assetPrice')\r\n  const [chartTimePeriod, setChartTimePeriod] = useState('30_day')\r\n\r\n  const mounted:any = useRef()\r\n\r\n  const params:any = useParams()\r\n  const contractAddress:string = params.contract_address\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const multiPoolState = useSelector((state:any) => state.multiPool)\r\n\r\n  useEffect(() => {\r\n    if (!mounted.current) {\r\n      // do componentDidMount logic\r\n      dispatch({ type: 'SET_MULTI_POOL', payload: { contractAddress } })\r\n      dispatch(loadMultiPool())\r\n\r\n      mounted.current = true;\r\n    } else {\r\n      // do componentDidUpdate logic\r\n      if (contractAddress && contractAddress !== multiPoolState.contractAddress) {\r\n        dispatch({ type: 'RESET_MULTI_POOL' })\r\n        dispatch({ type: 'SET_MULTI_POOL', payload: { contractAddress } })\r\n        dispatch(loadMultiPool())\r\n      }\r\n    }\r\n  })\r\n\r\n  const handleChartTypeTab = (value:string) => {\r\n    setChartType(value)\r\n  }\r\n\r\n  const handleChartTimePeriodTab = (value:string) => {\r\n    setChartTimePeriod(value)\r\n  }\r\n\r\n  if (multiPoolState.meta.success) {\r\n    // // Transform chart data by period\r\n    // let timePeriod\r\n    // switch (chartTimePeriod) {\r\n    //   case \"7_day\": {\r\n    //     timePeriod = 7\r\n    //     break;\r\n    //   }\r\n\r\n    //   case \"30_day\": {\r\n    //     timePeriod = 30\r\n    //     break;\r\n    //   }\r\n\r\n    //   case \"365_day\": {\r\n    //     timePeriod = 365\r\n    //     break;\r\n    //   }\r\n    // }\r\n\r\n    let chartData\r\n    let chartLeftMargin\r\n    switch (chartType) {\r\n      case 'assetPrice': {\r\n        chartData = [\r\n          ['Datetime', 'Asset Price'],\r\n          ...multiPoolState.data.chart.assetPrice,\r\n        ]\r\n        chartLeftMargin = 50\r\n        break\r\n      }\r\n\r\n      case 'volume': {\r\n        chartData = [\r\n          ['Datetime', 'Volume'],\r\n          ...multiPoolState.data.chart.volume,\r\n        ]\r\n        chartLeftMargin = 70\r\n        break\r\n      }\r\n\r\n      case 'liquidity': {\r\n        chartData = [\r\n          ['Datetime', 'Liquidity'],\r\n          ...multiPoolState.data.chart.liquidity,\r\n        ]\r\n        chartLeftMargin = 80\r\n        break\r\n      }\r\n\r\n      case 'feeReturns': {\r\n        chartData = [\r\n          ['Datetime', 'Fee Returns'],\r\n          ...multiPoolState.data.chart.feeReturns,\r\n        ]\r\n        chartLeftMargin = 40\r\n        break\r\n      }\r\n    }\r\n\r\n    // Get most recent and second most recent price array\r\n    const priceArray0:any = _.takeRight(multiPoolState.data.chart.assetPrice, 1)[0]\r\n    const price0 = priceArray0[1]\r\n    const priceArray1:any = _.takeRight(multiPoolState.data.chart.assetPrice, 2)[0]\r\n    const price1 = priceArray1[1]\r\n    const percChange = ((price0 - price1) / price1) * 100\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <div className={classes.dashboardContainer}>\r\n          <PageHeader\r\n            title={multiPoolState.name}\r\n            price={genFormattedNumber(price0, 2)}\r\n            priceChangePerc={genFormattedNumber(percChange, 2)}\r\n            percChange\r\n          />\r\n\r\n          <div className={classes.dashboard}>\r\n\r\n            <div className={classes.dashboardLeft}>\r\n            <div className={cx(classes.chartCard, classes.card)}>\r\n                <div className={classes.chartContainer}>\r\n                  <Chart\r\n                    width={'100%'}\r\n                    height={'100%'}\r\n                    chartType={ chartType === 'assetPrice' ? 'LineChart' : 'ColumnChart' }\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={chartData}\r\n                    options={{\r\n                      legend: 'none',\r\n                      chartArea: {\r\n                        left: chartLeftMargin,\r\n                        top: 20,\r\n                        width: '90%',\r\n                        height: '90%',\r\n                      },\r\n                      colors: ['#848ca9'],\r\n                      hAxis: {\r\n                        textPosition: 'none',\r\n                        gridlines: {\r\n                          color: 'transparent'\r\n                        },\r\n                        textStyle: {\r\n                          fontName: 'Inter',\r\n                          fontSize: 13,\r\n                          fontWeight: 600,\r\n                          color: '#595e78',\r\n                        },\r\n                      },\r\n                      vAxis: {\r\n                        format: chartType === 'feeReturns' ? '#,###%' : '$#,###',\r\n                        gridlines: {\r\n                          color: '#e6e6f0'\r\n                        },\r\n                        minorGridlines: {\r\n                          color: 'transparent'\r\n                        },\r\n                        textStyle: {\r\n                          fontName: 'Inter',\r\n                          fontSize: 13,\r\n                          fontWeight: 600,\r\n                          color: '#595e78',\r\n                        },\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div className={classes.chartActions}>\r\n                  <div\r\n                    className={classes.typeTabContainer}\r\n                    style={{\r\n                      maxWidth: '380px'\r\n                    }}\r\n                  >\r\n                    <SegmentedTabs\r\n                      items={[{\r\n                        text: 'Asset Price',\r\n                        value: 'assetPrice',\r\n                      },{\r\n                        text: 'Volume',\r\n                        value: 'volume',\r\n                      },{\r\n                        text: 'Liquidity',\r\n                        value: 'liquidity',\r\n                      },{\r\n                        text: 'Fee Returns',\r\n                        value: 'feeReturns',\r\n                      }]}\r\n                      value={chartType}\r\n                      onInput={handleChartTypeTab}\r\n                    />\r\n                  </div>\r\n\r\n                  {/* <div className={classes.timePeriodTabContainer}>\r\n                    <SegmentedTabs\r\n                      items={[{\r\n                        text: '7D',\r\n                        value: '7_day',\r\n                      }, {\r\n                        text: '30D',\r\n                        value: '30_day',\r\n                      }, {\r\n                        text: '1Y',\r\n                        value: '365_day',\r\n                      }]}\r\n                      value={chartTimePeriod}\r\n                      onInput={handleChartTimePeriodTab}\r\n                    />\r\n                  </div> */}\r\n                </div>\r\n              </div>\r\n\r\n              <div className={classes.threeGrid}>\r\n                <div className={classes.card}>\r\n                  <Metric\r\n                    className={classes.metric}\r\n                    label=\"Holder Count\"\r\n                    valueItems={[{\r\n                      value: multiPoolState.data.liquidityProviderCount,\r\n                    }]}\r\n                  />\r\n                </div>\r\n                <div className={classes.card}>\r\n                  <Metric\r\n                    className={classes.metric}\r\n                    label=\"Asset Value\"\r\n                    valueItems={[{\r\n                      prefix: '$',\r\n                      value: genFormattedNumber(multiPoolState.data.assetValue, 0),\r\n                      suffix: 'USD',\r\n                    }]}\r\n                  />\r\n                </div>\r\n                <div className={classes.card}>\r\n                  <Metric\r\n                    className={classes.metric}\r\n                    label=\"Liquidity\"\r\n                    valueItems={[{\r\n                      prefix: '$',\r\n                      value: genFormattedNumber(multiPoolState.data.liquidity, 0),\r\n                      suffix: 'USD',\r\n                    }]}\r\n                  />\r\n                </div>\r\n                <div className={classes.card}>\r\n                  <Metric\r\n                    className={classes.metric}\r\n                    label=\"24H Volume\"\r\n                    valueItems={[{\r\n                      prefix: '$',\r\n                      value: genFormattedNumber(multiPoolState.data.volume, 0),\r\n                      suffix: 'USD',\r\n                    }]}\r\n                  />\r\n                </div>\r\n                <div className={classes.card}>\r\n                  <Metric\r\n                    className={classes.metric}\r\n                    label=\"24H Fees Earned\"\r\n                    valueItems={[{\r\n                      prefix: '$',\r\n                      value: genFormattedNumber(multiPoolState.data.feesEarned, 2),\r\n                      suffix: 'USD',\r\n                    }]}\r\n                  />\r\n                </div>\r\n                <div className={classes.card}>\r\n                  <Metric\r\n                    className={classes.metric}\r\n                    label=\"24H Fees APY\"\r\n                    valueItems={[{\r\n                      value: genFormattedNumber(multiPoolState.data.feesApy * 100, 2),\r\n                      suffix: '%',\r\n                    }]}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={classes.dashboardRight}>\r\n              <div className={classes.card}>\r\n                <div className={classes.cardTitle}>Assets</div>\r\n                <Chart\r\n                  width={'100%'}\r\n                  height={'200px'}\r\n                  chartType=\"PieChart\"\r\n                  loader={<div>Loading Chart</div>}\r\n                  data={[\r\n                    ['Asset', 'Ratio'],\r\n                    ...multiPoolState.assets.map((item:any) => ([\r\n                      item.ticker,\r\n                      item.proportion,\r\n                    ])),\r\n                  ]}\r\n                  options={{\r\n                    chartArea: {\r\n                      left: 0,\r\n                      top: 10,\r\n                      width: '100%',\r\n                      height: '90%',\r\n                    },\r\n                    legend: 'none',\r\n                    pieSliceText: 'label',\r\n                    fontSize: 13,\r\n                    fontName: 'Inter',\r\n                    tooltip: {\r\n                      trigger: 'selection',\r\n                    },\r\n                    colors: multiPoolState.assets.map((item:any) => item.brandColor),\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className={classes.card}>\r\n                <BalApyMetric />\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.wallet}>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return <Loader />\r\n  }\r\n}\r\n\r\nexport default MultiPoolPage\r\n"]},"metadata":{},"sourceType":"module"}