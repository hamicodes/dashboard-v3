{"ast":null,"code":"var _jsxFileName = \"/Users/nco/Documents/GitHub/dashboard/src/Store.tsx\";\nimport React from \"react\";\nimport { createContext, useReducer } from \"react\";\nexport const initialState = {\n  ethPrice: undefined,\n  currency: \"eth\",\n  chartData: {},\n  statsData: {}\n};\nexport const Reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_ethPrice\":\n      return { ...state,\n        ethPrice: action.data\n      };\n\n    case \"SET_currency\":\n      return { ...state,\n        currency: action.data\n      };\n\n    case \"SET_chartData\":\n      return { ...state,\n        chartData: action.data\n      };\n\n    case \"SET_statsData\":\n      return { ...state,\n        statsData: action.data\n      };\n\n    default:\n      return state;\n  }\n};\nexport const Context = createContext({\n  dispatch: () => {},\n  state: initialState\n});\nexport const Store = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/Store.tsx"],"names":["React","createContext","useReducer","initialState","ethPrice","undefined","currency","chartData","statsData","Reducer","state","action","type","data","Context","dispatch","Store","children"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAEA,SAASC,aAAT,EAA2CC,UAA3C,QAA6D,OAA7D;AAcA,OAAO,MAAMC,YAAmB,GAAG;AAC/BC,EAAAA,QAAQ,EAAEC,SADqB;AAE/BC,EAAAA,QAAQ,EAAE,KAFqB;AAG/BC,EAAAA,SAAS,EAAE,EAHoB;AAI/BC,EAAAA,SAAS,EAAE;AAJoB,CAA5B;AAOP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAeC,MAAf,KAAyC;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AAAqB,aAAO,EACxB,GAAGF,KADqB;AAExBN,QAAAA,QAAQ,EAAEO,MAAM,CAACE;AAFO,OAAP;;AAIrB,SAAK,cAAL;AAAqB,aAAO,EACxB,GAAGH,KADqB;AAExBJ,QAAAA,QAAQ,EAAEK,MAAM,CAACE;AAFO,OAAP;;AAIrB,SAAK,eAAL;AAAsB,aAAO,EACzB,GAAGH,KADsB;AAEzBH,QAAAA,SAAS,EAAEI,MAAM,CAACE;AAFO,OAAP;;AAItB,SAAK,eAAL;AAAsB,aAAO,EACzB,GAAGH,KADsB;AAEzBF,QAAAA,SAAS,EAAEG,MAAM,CAACE;AAFO,OAAP;;AAItB;AAAS,aAAOH,KAAP;AAjBb;AAmBH,CApBM;AA2BP,OAAO,MAAMI,OAAO,GAAGb,aAAa,CAAe;AAC/Cc,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAD6B;AAE/CL,EAAAA,KAAK,EAAEP;AAFwC,CAAf,CAA7B;AAIP,OAAO,MAAMa,KAAwB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD,QAAM,CAACP,KAAD,EAAQK,QAAR,IAAoBb,UAAU,CAACO,OAAD,EAAUN,YAAV,CAApC;AACA,sBACI,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAF;AAASK,MAAAA;AAAT,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACME,QADN,CADJ;AAKH,CAPM","sourcesContent":["import React, { Dispatch } from \"react\"\nimport { CurrencyAmount } from \"@uniswap/sdk\"\nimport { createContext, FunctionComponent, useReducer } from \"react\"\n\nexport type State = {\n    ethPrice?: CurrencyAmount\n    currency: \"eth\" | \"usd\"\n    chartData: any\n    statsData: any\n}\n\nexport type Action = {\n    type: string\n    data: any\n}\n\nexport const initialState: State = {\n    ethPrice: undefined,\n    currency: \"eth\",\n    chartData: {},\n    statsData: {}\n}\n\nexport const Reducer = (state: State, action: Action): State => {\n    switch (action.type) {\n        case \"SET_ethPrice\": return {\n            ...state,\n            ethPrice: action.data\n        }\n        case \"SET_currency\": return {\n            ...state,\n            currency: action.data as (\"eth\" | \"usd\")\n        }\n        case \"SET_chartData\": return {\n            ...state,\n            chartData: action.data as any\n        }\n        case \"SET_statsData\": return {\n            ...state,\n            statsData: action.data as any\n        }\n        default: return state\n    }\n}\n\nexport type ContextProps = {\n    state: State\n    dispatch: Dispatch<Action>\n}\n\nexport const Context = createContext<ContextProps>({\n    dispatch: () => {},\n    state: initialState\n})\nexport const Store: FunctionComponent = ({ children }) => {\n    const [state, dispatch] = useReducer(Reducer, initialState)\n    return (\n        <Context.Provider value={{ state, dispatch }}>\n            { children }\n        </Context.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}