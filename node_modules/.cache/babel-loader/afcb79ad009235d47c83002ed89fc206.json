{"ast":null,"code":"import { CurrencyAmount } from \"@uniswap/sdk\";\nimport { parseEther } from \"ethers/lib/utils\";\nimport { useContext, useMemo } from \"react\";\nimport { Context } from \"../Store\";\nimport { Api } from \"../util/api\";\nimport { formatNumber } from \"../util/formatNumber\";\nexport const useETHPrice = () => {\n  const {\n    state\n  } = useContext(Context);\n  return state.ethPrice;\n};\nexport const useStatsData = pool => {\n  const {\n    state\n  } = useContext(Context);\n  return (state.statsData || {})[pool ? pool.id : \"all\"] || {};\n};\nexport const useChartData = (type, pool) => {\n  const {\n    state\n  } = useContext(Context);\n  return useMemo(() => {\n    switch (type) {\n      case \"price\":\n        return (state.chartData[\"prices\"] || {})[pool ? pool.id : \"all\"] || {};\n\n      case \"volume\":\n        {\n          const chartData = (state.chartData[\"volumes\"] || {})[pool ? pool.id : \"all\"] || {};\n          const additionalTimeframes = [[\"1w\", 7], [\"30d\", 30]];\n\n          if (chartData[\"all\"]) {\n            additionalTimeframes.forEach(([label, days]) => {\n              chartData[label] = chartData[\"all\"].slice(-days);\n            });\n          }\n\n          return chartData;\n        }\n    }\n  }, [type, pool, state.chartData]);\n};\nexport const useFormattedChartData = (type, pool, period) => {\n  const data = useChartData(type, pool);\n  return useMemo(() => (data[period] || []).map(([timestamp, value]) => ({\n    x: timestamp,\n    y: value || 0\n  })), [data, period]);\n};\nexport const fetchETHPrice = async () => {\n  const result = await Api.get(\"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\", true);\n  const price = result.ethereum.usd;\n  return CurrencyAmount.ether(parseEther(price.toString()).toString());\n};\nexport const usePrice = (price, currency) => {\n  const {\n    state: {\n      currency: targetCurrency\n    }\n  } = useContext(Context);\n  const ethPrice = useETHPrice();\n  if (!price) return undefined;\n\n  const convertedPrice = (() => {\n    if (currency === targetCurrency) return price;\n    if (!ethPrice) return undefined;\n    return targetCurrency === \"eth\" ? ethPrice.multiply(price.raw).divide((10 ** 18).toString()) : ethPrice.multiply((10 ** 18).toString()).divide(price.raw);\n  })();\n\n  return convertedPrice ? `${currency === \"eth\" ? \"Ξ \" : \"$\"}${formatNumber(convertedPrice.toSignificant(4))}` : undefined;\n};","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/hooks/useGlobalState.ts"],"names":["CurrencyAmount","parseEther","useContext","useMemo","Context","Api","formatNumber","useETHPrice","state","ethPrice","useStatsData","pool","statsData","id","useChartData","type","chartData","additionalTimeframes","forEach","label","days","slice","useFormattedChartData","period","data","map","timestamp","value","x","y","fetchETHPrice","result","get","price","ethereum","usd","ether","toString","usePrice","currency","targetCurrency","undefined","convertedPrice","multiply","raw","divide","toSignificant"],"mappings":"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","sourcesContent":["import { CurrencyAmount } from \"@uniswap/sdk\"\nimport { parseEther } from \"ethers/lib/utils\"\nimport { useContext, useMemo } from \"react\"\nimport { Pool } from \"../Constants/Pool\"\nimport { Context } from \"../Store\"\nimport { Api } from \"../util/api\"\nimport { formatNumber } from \"../util/formatNumber\"\n\nexport const useETHPrice = () => {\n    const { state } = useContext(Context)\n    return state.ethPrice\n}\n\nexport const useStatsData = (pool: Pool | null) => {\n    const { state } = useContext(Context)\n    return (state.statsData || {})[pool ? pool.id : \"all\"] || {}\n}\n\nexport const useChartData = (type: \"price\" | \"volume\", pool: Pool | null) => {\n    const { state } = useContext(Context)\n    return useMemo(() => {\n        switch (type) {\n            case \"price\":   return (state.chartData[\"prices\"] || {})[pool ? pool.id : \"all\"] || {}\n            case \"volume\":  {\n                const chartData = (state.chartData[\"volumes\"] || {})[pool ? pool.id : \"all\"] || {}\n                const additionalTimeframes = [[\"1w\", 7], [\"30d\", 30]]\n                if (chartData[\"all\"]) {\n                    additionalTimeframes.forEach(([label, days]) => {\n                        chartData[label] = chartData[\"all\"].slice(-days)\n                    })\n                }\n                return chartData\n            }\n        }\n    }, [type, pool, state.chartData])\n}\n\nexport const useFormattedChartData = (type: \"price\" | \"volume\", pool: Pool | null, period: string) => {\n    const data = useChartData(type, pool)\n    return useMemo(() => ((data[period] || []) as [number, number][]).map(([timestamp, value]: [number, number]) => ({ x: timestamp, y: value || 0 })), [data, period])\n}\n\nexport const fetchETHPrice = async () => {\n    const result = await Api.get(\"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\", true)\n    const price = result.ethereum.usd as number\n    return CurrencyAmount.ether(parseEther(price.toString()).toString())\n}\n\nexport const usePrice = (price: CurrencyAmount | undefined, currency: \"eth\" | \"usd\") => {\n    const { state: { currency: targetCurrency } } = useContext(Context)\n    const ethPrice = useETHPrice()\n    if (!price) return undefined\n    const convertedPrice = (() => {\n        if (currency === targetCurrency) return price\n        if (!ethPrice) return undefined\n        return targetCurrency === \"eth\" ? ethPrice.multiply(price.raw).divide((10 ** 18).toString()) : ethPrice.multiply((10 ** 18).toString()).divide(price.raw)\n    })()\n    return convertedPrice ? `${currency === \"eth\" ? \"Ξ \" : \"$\"}${formatNumber(convertedPrice.toSignificant(4))}` : undefined\n}"]},"metadata":{},"sourceType":"module"}