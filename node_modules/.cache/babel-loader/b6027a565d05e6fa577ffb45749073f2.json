{"ast":null,"code":"var _jsxFileName = \"/Users/nco/Documents/GitHub/dashboard/src/pages/PoolPage.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadPool } from '../store/actions/pool';\nimport PageHeader from '../Components/PageHeader/PageHeader';\nimport classes from './PoolPage.module.scss';\nimport cx from 'classnames';\nimport { Chart } from 'react-google-charts';\nimport _ from 'lodash';\nimport SegmentedTabs from '../Components/SegmentedTabs/SegmentedTabs';\nimport ApyMetric from '../Components/ApyMetric/ApyMetric';\nimport Loader from '../Components/Loader/Loader';\n\nconst PoolPage = () => {\n  const mounted = useRef();\n  const params = useParams();\n  const contractAddress = params.contract_address;\n  const dispatch = useDispatch();\n  const poolState = useSelector(state => state.pool);\n  const [chartType, setChartType] = useState('volume');\n  const [chartTimePeriod, setChartTimePeriod] = useState('7_day');\n  useEffect(() => {\n    if (!mounted.current) {\n      // do componentDidMount logic\n      dispatch({\n        type: 'SET_POOL',\n        payload: {\n          contractAddress\n        }\n      });\n      dispatch(loadPool());\n      mounted.current = true;\n    } else {\n      // do componentDidUpdate logic\n      if (contractAddress && contractAddress !== poolState.contractAddress) {\n        dispatch({\n          type: 'RESET_POOL'\n        });\n        dispatch({\n          type: 'SET_POOL',\n          payload: {\n            contractAddress\n          }\n        });\n        dispatch(loadPool());\n      }\n    }\n  });\n\n  const handleChartTypeTab = value => {\n    setChartType(value);\n  };\n\n  const handleChartTimePeriodTab = value => {\n    setChartTimePeriod(value);\n  };\n\n  if (poolState.meta.success) {\n    // Transform chart data by period\n    let timePeriod;\n\n    switch (chartTimePeriod) {\n      case \"7_day\":\n        {\n          timePeriod = 7;\n          break;\n        }\n\n      case \"30_day\":\n        {\n          timePeriod = 30;\n          break;\n        }\n\n      case \"365_day\":\n        {\n          timePeriod = 365;\n          break;\n        }\n    }\n\n    let chartData;\n    let chartLeftMargin;\n\n    switch (chartType) {\n      case 'volume':\n        {\n          chartData = [['Datetime', 'Volume'], ..._.takeRight(poolState.data.chart.volume, timePeriod)];\n          chartLeftMargin = 70;\n          break;\n        }\n\n      case 'liquidity':\n        {\n          chartData = [['Datetime', 'Liquidity'], ..._.takeRight(poolState.data.chart.liquidity, timePeriod)];\n          chartLeftMargin = 90;\n          break;\n        }\n\n      case 'feeReturns':\n        {\n          chartData = [['Datetime', 'Fee Returns'], ..._.takeRight(poolState.data.chart.feeReturns, timePeriod)];\n          chartLeftMargin = 40;\n          break;\n        }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PageHeader, {\n      title: poolState.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardLeft,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(classes.chartCard, classes.card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      width: '100%',\n      height: '300px',\n      chartType: \"ColumnChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }\n      }, \"Loading Chart\"),\n      data: chartData,\n      options: {\n        legend: 'none',\n        chartArea: {\n          left: chartLeftMargin,\n          top: 20,\n          width: '90%',\n          height: '90%'\n        },\n        hAxis: {\n          textPosition: 'none',\n          gridlines: {\n            color: 'transparent'\n          },\n          textStyle: {\n            fontName: 'Inter',\n            fontSize: 13,\n            fontWeight: 600,\n            color: '#595e78'\n          }\n        },\n        vAxis: {\n          format: chartType === 'feeReturns' ? '#,###%' : '$#,###',\n          gridlines: {\n            color: '#e6e6f0'\n          },\n          minorGridlines: {\n            color: 'transparent'\n          },\n          textStyle: {\n            fontName: 'Inter',\n            fontSize: 13,\n            fontWeight: 600,\n            color: '#595e78'\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.chartActions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.typeTabContainer,\n      style: {\n        maxWidth: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(SegmentedTabs, {\n      items: [{\n        text: 'Volume',\n        value: 'volume'\n      }, {\n        text: 'Liquidity',\n        value: 'liquidity'\n      }, {\n        text: 'Fee Returns',\n        value: 'feeReturns'\n      }],\n      value: chartType,\n      onInput: handleChartTypeTab,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.timePeriodTabContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(SegmentedTabs, {\n      items: [{\n        text: '7D',\n        value: '7_day'\n      }, {\n        text: '30D',\n        value: '30_day'\n      }, {\n        text: '1Y',\n        value: '365_day'\n      }],\n      value: chartTimePeriod,\n      onInput: handleChartTimePeriodTab,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.dashboardRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.cardTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, \"Assets\"), /*#__PURE__*/React.createElement(Chart, {\n      width: '100%',\n      height: '200px',\n      chartType: \"PieChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 27\n        }\n      }, \"Loading Chart\"),\n      data: [['Asset', 'Ratio'], ...poolState.assets.map(item => [item.ticker, item.proportion])],\n      options: {\n        chartArea: {\n          left: 0,\n          top: 10,\n          width: '100%',\n          height: '90%'\n        },\n        legend: 'none',\n        pieSliceText: 'label',\n        fontSize: 15,\n        fontName: 'Inter',\n        tooltip: {\n          trigger: 'selection'\n        },\n        colors: poolState.assets.map(item => item.brandColor)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ApyMetric, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.wallet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(Loader, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 12\n      }\n    });\n  }\n};\n\nexport default PoolPage;","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/pages/PoolPage.tsx"],"names":["React","useState","useEffect","useRef","useParams","useDispatch","useSelector","loadPool","PageHeader","classes","cx","Chart","_","SegmentedTabs","ApyMetric","Loader","PoolPage","mounted","params","contractAddress","contract_address","dispatch","poolState","state","pool","chartType","setChartType","chartTimePeriod","setChartTimePeriod","current","type","payload","handleChartTypeTab","value","handleChartTimePeriodTab","meta","success","timePeriod","chartData","chartLeftMargin","takeRight","data","chart","volume","liquidity","feeReturns","container","dashboardContainer","name","dashboard","dashboardLeft","chartCard","card","chartContainer","legend","chartArea","left","top","width","height","hAxis","textPosition","gridlines","color","textStyle","fontName","fontSize","fontWeight","vAxis","format","minorGridlines","chartActions","typeTabContainer","maxWidth","text","timePeriodTabContainer","dashboardRight","cardTitle","assets","map","item","ticker","proportion","pieSliceText","tooltip","trigger","colors","brandColor","wallet"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState, useEffect, useRef } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadPool } from '../store/actions/pool'\r\nimport PageHeader from '../Components/PageHeader/PageHeader'\r\nimport classes from './PoolPage.module.scss'\r\nimport cx from 'classnames'\r\nimport Metric from '../Components/Metric/Metric'\r\nimport TokenIcon from '../Components/TokenIcon/TokenIcon'\r\nimport { Chart } from 'react-google-charts'\r\nimport _ from 'lodash'\r\nimport SegmentedTabs from '../Components/SegmentedTabs/SegmentedTabs'\r\nimport { genFormattedNumber } from '../util/numberFormat'\r\nimport ApyMetric from '../Components/ApyMetric/ApyMetric'\r\nimport Loader from '../Components/Loader/Loader'\r\n\r\nconst PoolPage: FunctionComponent = () => {\r\n  const mounted:any = useRef()\r\n\r\n  const params:any = useParams()\r\n  const contractAddress:string = params.contract_address\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const poolState = useSelector((state:any) => state.pool)\r\n  const [chartType, setChartType] = useState('volume')\r\n  const [chartTimePeriod, setChartTimePeriod] = useState('7_day')\r\n\r\n  useEffect(() => {\r\n    if (!mounted.current) {\r\n      // do componentDidMount logic\r\n      dispatch({ type: 'SET_POOL', payload: { contractAddress } })\r\n      dispatch(loadPool())\r\n\r\n      mounted.current = true;\r\n    } else {\r\n      // do componentDidUpdate logic\r\n      if (contractAddress && contractAddress !== poolState.contractAddress) {\r\n        dispatch({ type: 'RESET_POOL' })\r\n        dispatch({ type: 'SET_POOL', payload: { contractAddress } })\r\n        dispatch(loadPool())\r\n      }\r\n    }\r\n  })\r\n\r\n  const handleChartTypeTab = (value:string) => {\r\n    setChartType(value)\r\n  }\r\n\r\n  const handleChartTimePeriodTab = (value:string) => {\r\n    setChartTimePeriod(value)\r\n  }\r\n\r\n\r\n  if (poolState.meta.success) {\r\n    // Transform chart data by period\r\n    let timePeriod\r\n    switch (chartTimePeriod) {\r\n      case \"7_day\": {\r\n        timePeriod = 7\r\n        break;\r\n      }\r\n\r\n      case \"30_day\": {\r\n        timePeriod = 30\r\n        break;\r\n      }\r\n\r\n      case \"365_day\": {\r\n        timePeriod = 365\r\n        break;\r\n      }\r\n    }\r\n\r\n    let chartData\r\n    let chartLeftMargin\r\n    switch (chartType) {\r\n      case 'volume': {\r\n        chartData = [\r\n          ['Datetime', 'Volume'],\r\n          ..._.takeRight(poolState.data.chart.volume, timePeriod),\r\n        ]\r\n        chartLeftMargin = 70\r\n        break\r\n      }\r\n\r\n      case 'liquidity': {\r\n        chartData = [\r\n          ['Datetime', 'Liquidity'],\r\n          ..._.takeRight(poolState.data.chart.liquidity, timePeriod),\r\n        ]\r\n        chartLeftMargin = 90\r\n        break\r\n      }\r\n\r\n      case 'feeReturns': {\r\n        chartData = [\r\n          ['Datetime', 'Fee Returns'],\r\n          ..._.takeRight(poolState.data.chart.feeReturns, timePeriod),\r\n        ]\r\n        chartLeftMargin = 40\r\n        break\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <div className={classes.dashboardContainer}>\r\n          <PageHeader\r\n            title={poolState.name}\r\n          />\r\n\r\n          <div className={classes.dashboard}>\r\n            <div className={classes.dashboardLeft}>\r\n              <div className={cx(classes.chartCard, classes.card)}>\r\n                <div className={classes.chartContainer}>\r\n                  <Chart\r\n                    width={'100%'}\r\n                    height={'300px'}\r\n                    chartType=\"ColumnChart\"\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={chartData}\r\n                    options={{\r\n                      legend: 'none',\r\n                      chartArea: {\r\n                        left: chartLeftMargin,\r\n                        top: 20,\r\n                        width: '90%',\r\n                        height: '90%',\r\n                      },\r\n                      hAxis: {\r\n                        textPosition: 'none',\r\n                        gridlines: {\r\n                          color: 'transparent'\r\n                        },\r\n                        textStyle: {\r\n                          fontName: 'Inter',\r\n                          fontSize: 13,\r\n                          fontWeight: 600,\r\n                          color: '#595e78',\r\n                        },\r\n                      },\r\n                      vAxis: {\r\n                        format: chartType === 'feeReturns' ? '#,###%' : '$#,###',\r\n                        gridlines: {\r\n                          color: '#e6e6f0'\r\n                        },\r\n                        minorGridlines: {\r\n                          color: 'transparent'\r\n                        },\r\n                        textStyle: {\r\n                          fontName: 'Inter',\r\n                          fontSize: 13,\r\n                          fontWeight: 600,\r\n                          color: '#595e78',\r\n                        },\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div className={classes.chartActions}>\r\n                  <div\r\n                    className={classes.typeTabContainer}\r\n                    style={{\r\n                      maxWidth: '300px'\r\n                    }}\r\n                  >\r\n                    <SegmentedTabs\r\n                      items={[{\r\n                        text: 'Volume',\r\n                        value: 'volume',\r\n                      },{\r\n                        text: 'Liquidity',\r\n                        value: 'liquidity',\r\n                      },{\r\n                        text: 'Fee Returns',\r\n                        value: 'feeReturns',\r\n                      }]}\r\n                      value={chartType}\r\n                      onInput={handleChartTypeTab}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className={classes.timePeriodTabContainer}>\r\n                    <SegmentedTabs\r\n                      items={[{\r\n                        text: '7D',\r\n                        value: '7_day',\r\n                      }, {\r\n                        text: '30D',\r\n                        value: '30_day',\r\n                      }, {\r\n                        text: '1Y',\r\n                        value: '365_day',\r\n                      }]}\r\n                      value={chartTimePeriod}\r\n                      onInput={handleChartTimePeriodTab}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={classes.dashboardRight}>\r\n              <div className={classes.card}>\r\n                <div className={classes.cardTitle}>Assets</div>\r\n                <Chart\r\n                  width={'100%'}\r\n                  height={'200px'}\r\n                  chartType=\"PieChart\"\r\n                  loader={<div>Loading Chart</div>}\r\n                  data={[\r\n                    ['Asset', 'Ratio'],\r\n                    ...poolState.assets.map((item:any) => ([ item.ticker, item.proportion ])),\r\n                  ]}\r\n                  options={{\r\n                    chartArea: {\r\n                      left: 0,\r\n                      top: 10,\r\n                      width: '100%',\r\n                      height: '90%',\r\n                    },\r\n                    legend: 'none',\r\n                    pieSliceText: 'label',\r\n                    fontSize: 15,\r\n                    fontName: 'Inter',\r\n                    tooltip: {\r\n                      trigger: 'selection',\r\n                    },\r\n                    colors: poolState.assets.map((item:any) => item.brandColor),\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className={classes.card}>\r\n                <ApyMetric />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.wallet}>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return <Loader size='medium' />\r\n  }\r\n}\r\n\r\nexport default PoolPage\r\n"]},"metadata":{},"sourceType":"module"}