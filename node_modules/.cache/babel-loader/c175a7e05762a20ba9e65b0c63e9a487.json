{"ast":null,"code":"import axios from 'axios';\nimport _ from 'lodash';\nimport log from '../../util/log';\nimport { DateTime } from 'luxon';\nexport const load = () => async dispatch => {\n  log.info('store:statera:load');\n  dispatch({\n    type: 'STATERA_LOADING'\n  });\n  Promise.all([getStaPriceAndVolume(), getWStaPrice(), getStaSupply(), getWStaSupply(), getChartData()]).then(_results => {\n    const anyErrors = _.some(_results, result => result.status === 'error');\n\n    log.info('store:statera:load:complete', _results, 'anyErrors?', anyErrors);\n\n    if (anyErrors) {\n      dispatch({\n        type: 'STATERA_ERROR'\n      });\n    } else {\n      dispatch({\n        type: 'STATERA_SUCCESS',\n        payload: _results\n      });\n    }\n  });\n}; // Price & volume\n\nconst getStaPriceAndVolume = () => {\n  return new Promise(resolve => {\n    axios.get('https://api.coingecko.com/api/v3/coins/statera', {\n      params: {\n        localization: 'false',\n        tickers: 'true',\n        market_data: 'true',\n        community_data: 'false',\n        developer_data: 'false',\n        sparkline: 'false'\n      }\n    }).then(_res => {\n      var _res$data$market_data, _res$data$market_data2, _res$data$market_data3, _res$data$market_data4, _res$data$market_data5, _tickerData$converted;\n\n      const currentPrice = (_res$data$market_data = _res.data.market_data) === null || _res$data$market_data === void 0 ? void 0 : (_res$data$market_data2 = _res$data$market_data.current_price) === null || _res$data$market_data2 === void 0 ? void 0 : _res$data$market_data2.usd;\n      const priceChangePerc = (_res$data$market_data3 = _res.data.market_data) === null || _res$data$market_data3 === void 0 ? void 0 : _res$data$market_data3.price_change_percentage_24h;\n      const priceChange = (_res$data$market_data4 = _res.data.market_data) === null || _res$data$market_data4 === void 0 ? void 0 : (_res$data$market_data5 = _res$data$market_data4.price_change_24h_in_currency) === null || _res$data$market_data5 === void 0 ? void 0 : _res$data$market_data5.usd;\n      const previousPrice = currentPrice + priceChange;\n      const tickers = _res.data.tickers;\n      const tickerData = tickers.find(item => item.market.identifier === 'uniswap' || item.market.identifier === 'uniswap_v2');\n      const volumeInSta = tickerData.volume;\n      const volumeInCurrency = (_tickerData$converted = tickerData.converted_volume) === null || _tickerData$converted === void 0 ? void 0 : _tickerData$converted.usd;\n      resolve({\n        name: 'price:sta',\n        status: 'success',\n        result: {\n          currentPrice,\n          priceChangePerc,\n          priceChange,\n          previousPrice,\n          volumeInSta,\n          volumeInCurrency\n        }\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'price:sta',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n};\n\nconst getWStaPrice = () => {\n  return new Promise(resolve => {\n    axios.get('https://api.coingecko.com/api/v3/coins/wrapped-statera', {\n      params: {\n        localization: 'false',\n        tickers: 'true',\n        market_data: 'true',\n        community_data: 'false',\n        developer_data: 'false',\n        sparkline: 'false'\n      }\n    }).then(_res => {\n      var _res$data$market_data6, _res$data$market_data7, _res$data$market_data8, _res$data$market_data9, _res$data$market_data10;\n\n      const currentPrice = (_res$data$market_data6 = _res.data.market_data) === null || _res$data$market_data6 === void 0 ? void 0 : (_res$data$market_data7 = _res$data$market_data6.current_price) === null || _res$data$market_data7 === void 0 ? void 0 : _res$data$market_data7.usd;\n      const priceChangePerc = (_res$data$market_data8 = _res.data.market_data) === null || _res$data$market_data8 === void 0 ? void 0 : _res$data$market_data8.price_change_percentage_24h;\n      const priceChange = (_res$data$market_data9 = _res.data.market_data) === null || _res$data$market_data9 === void 0 ? void 0 : (_res$data$market_data10 = _res$data$market_data9.price_change_24h_in_currency) === null || _res$data$market_data10 === void 0 ? void 0 : _res$data$market_data10.usd;\n      const previousPrice = currentPrice + priceChange;\n      resolve({\n        name: 'price:wsta',\n        status: 'success',\n        result: {\n          currentPrice,\n          priceChangePerc,\n          priceChange,\n          previousPrice\n        }\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'price:wsta',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n}; // Supply\n\n\nconst getStaSupply = () => {\n  return new Promise(resolve => {\n    axios.get('https://api.coingecko.com/api/v3/coins/statera', {\n      params: {\n        localization: false,\n        market_data: true,\n        sparkline: false,\n        currency: 'usd'\n      }\n    }).then(_res => {\n      resolve({\n        name: 'supply:sta',\n        status: 'success',\n        result: _res.data.market_data.circulating_supply\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'supply:sta',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n};\n\nconst getWStaSupply = () => {\n  return new Promise(resolve => {\n    axios.get('https://api.coingecko.com/api/v3/coins/wrapped-statera', {\n      params: {\n        localization: false,\n        market_data: true,\n        sparkline: false,\n        currency: 'usd'\n      }\n    }).then(_res => {\n      resolve({\n        name: 'supply:wsta',\n        status: 'success',\n        result: _res.data.market_data.max_supply\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'supply:wsta',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n}; // Chart\n\n\nconst getChartData = () => {\n  return new Promise(resolve => {\n    const to = DateTime.local().toSeconds();\n    const from = DateTime.local().minus({\n      days: 30\n    }).toSeconds();\n    axios.get('https://api.coingecko.com/api/v3/coins/statera/market_chart/range', {\n      params: {\n        vs_currency: 'usd',\n        to,\n        from\n      }\n    }).then(_res => {\n      const price = _res.data.prices.map(item => {\n        const date = DateTime.fromMillis(item[0]).toLocaleString(DateTime.DATETIME_MED);\n        return [// item[0],\n        // DateTime.fromMillis(item[0]).toLocaleString(DateTime.DATE_MED),\n        date, item[1]];\n      });\n\n      const volume = _res.data.total_volumes.map(item => {\n        const date = DateTime.fromMillis(item[0]).toLocaleString(DateTime.DATETIME_MED);\n        return [// item[0],\n        // DateTime.fromMillis(item[0]).toLocaleString(DateTime.DATE_MED),\n        date, item[1]];\n      });\n\n      resolve({\n        name: 'chart',\n        status: 'success',\n        result: {\n          price,\n          volume\n        }\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'chart',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/store/actions/statera.ts"],"names":["axios","_","log","DateTime","load","dispatch","info","type","Promise","all","getStaPriceAndVolume","getWStaPrice","getStaSupply","getWStaSupply","getChartData","then","_results","anyErrors","some","result","status","payload","resolve","get","params","localization","tickers","market_data","community_data","developer_data","sparkline","_res","currentPrice","data","current_price","usd","priceChangePerc","price_change_percentage_24h","priceChange","price_change_24h_in_currency","previousPrice","tickerData","find","item","market","identifier","volumeInSta","volume","volumeInCurrency","converted_volume","name","catch","_error","currency","circulating_supply","max_supply","to","local","toSeconds","from","minus","days","vs_currency","price","prices","map","date","fromMillis","toLocaleString","DATETIME_MED","total_volumes"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { Dispatch } from 'redux'\r\nimport {\r\n  STA_CONTRACT_ADDRESS,\r\n  WSTA_CONTRACT_ADDRESS,\r\n} from '../../Constants/Constants'\r\nimport _ from 'lodash'\r\nimport log from '../../util/log'\r\nimport { DateTime } from 'luxon'\r\n\r\nexport const load = () => async (dispatch:Dispatch) => {\r\n  log.info('store:statera:load')\r\n  dispatch({ type: 'STATERA_LOADING' })\r\n\r\n  Promise.all([\r\n    getStaPriceAndVolume(),\r\n    getWStaPrice(),\r\n    getStaSupply(),\r\n    getWStaSupply(),\r\n    getChartData(),\r\n  ])\r\n    .then(_results => {\r\n      const anyErrors = _.some(_results, (result:any) => result.status === 'error')\r\n      log.info('store:statera:load:complete', _results, 'anyErrors?', anyErrors)\r\n\r\n      if (anyErrors) {\r\n        dispatch({ type: 'STATERA_ERROR' })\r\n      } else {\r\n        dispatch({ type: 'STATERA_SUCCESS', payload: _results })\r\n      }\r\n    })\r\n}\r\n\r\n\r\n// Price & volume\r\n\r\nconst getStaPriceAndVolume = () => {\r\n  return new Promise(resolve => {\r\n    axios.get('https://api.coingecko.com/api/v3/coins/statera', {\r\n      params: {\r\n        localization: 'false',\r\n        tickers: 'true',\r\n        market_data: 'true',\r\n        community_data: 'false',\r\n        developer_data: 'false',\r\n        sparkline: 'false',\r\n      }\r\n    })\r\n      .then(_res => {\r\n        const currentPrice = _res.data.market_data?.current_price?.usd\r\n        const priceChangePerc = _res.data.market_data?.price_change_percentage_24h\r\n        const priceChange = _res.data.market_data?.price_change_24h_in_currency?.usd\r\n        const previousPrice = currentPrice + priceChange\r\n\r\n        const tickers = _res.data.tickers\r\n        const tickerData = tickers.find((item:any) => item.market.identifier === 'uniswap' || item.market.identifier === 'uniswap_v2')\r\n        const volumeInSta = tickerData.volume\r\n        const volumeInCurrency = tickerData.converted_volume?.usd\r\n\r\n\r\n        resolve({\r\n          name: 'price:sta',\r\n          status: 'success',\r\n          result: {\r\n            currentPrice,\r\n            priceChangePerc,\r\n            priceChange,\r\n            previousPrice,\r\n            volumeInSta,\r\n            volumeInCurrency,\r\n          },\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'price:sta',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n\r\nconst getWStaPrice = () => {\r\n  return new Promise(resolve => {\r\n    axios.get('https://api.coingecko.com/api/v3/coins/wrapped-statera', {\r\n      params: {\r\n        localization: 'false',\r\n        tickers: 'true',\r\n        market_data: 'true',\r\n        community_data: 'false',\r\n        developer_data: 'false',\r\n        sparkline: 'false',\r\n      }\r\n    })\r\n      .then(_res => {\r\n        const currentPrice = _res.data.market_data?.current_price?.usd\r\n        const priceChangePerc = _res.data.market_data?.price_change_percentage_24h\r\n        const priceChange = _res.data.market_data?.price_change_24h_in_currency?.usd\r\n        const previousPrice = currentPrice + priceChange\r\n\r\n        resolve({\r\n          name: 'price:wsta',\r\n          status: 'success',\r\n          result: {\r\n            currentPrice,\r\n            priceChangePerc,\r\n            priceChange,\r\n            previousPrice,\r\n          },\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'price:wsta',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n\r\n\r\n// Supply\r\n\r\nconst getStaSupply = () => {\r\n  return new Promise(resolve => {\r\n    axios.get('https://api.coingecko.com/api/v3/coins/statera', {\r\n      params: {\r\n        localization: false,\r\n        market_data: true,\r\n        sparkline: false,\r\n        currency: 'usd',\r\n      }\r\n    })\r\n      .then(_res => {\r\n        resolve({\r\n          name: 'supply:sta',\r\n          status: 'success',\r\n          result: _res.data.market_data.circulating_supply,\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'supply:sta',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n\r\nconst getWStaSupply = () => {\r\n  return new Promise(resolve => {\r\n    axios.get('https://api.coingecko.com/api/v3/coins/wrapped-statera', {\r\n      params: {\r\n        localization: false,\r\n        market_data: true,\r\n        sparkline: false,\r\n        currency: 'usd',\r\n      }\r\n    })\r\n      .then(_res => {\r\n        resolve({\r\n          name: 'supply:wsta',\r\n          status: 'success',\r\n          result: _res.data.market_data.max_supply,\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'supply:wsta',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n\r\n\r\n// Chart\r\n\r\nconst getChartData = () => {\r\n  return new Promise(resolve => {\r\n    const to = DateTime.local().toSeconds()\r\n    const from = DateTime.local().minus({ days: 30 }).toSeconds()\r\n\r\n    axios.get('https://api.coingecko.com/api/v3/coins/statera/market_chart/range', {\r\n      params: {\r\n        vs_currency: 'usd',\r\n        to,\r\n        from,\r\n      }\r\n    })\r\n      .then(_res => {\r\n        const price = _res.data.prices.map((item:any) => {\r\n          const date = DateTime.fromMillis(item[0]).toLocaleString(DateTime.DATETIME_MED)\r\n          return [\r\n            // item[0],\r\n            // DateTime.fromMillis(item[0]).toLocaleString(DateTime.DATE_MED),\r\n            date,\r\n            item[1],\r\n          ]\r\n        })\r\n        const volume = _res.data.total_volumes.map((item:any) => {\r\n          const date = DateTime.fromMillis(item[0]).toLocaleString(DateTime.DATETIME_MED)\r\n          return [\r\n            // item[0],\r\n            // DateTime.fromMillis(item[0]).toLocaleString(DateTime.DATE_MED),\r\n            date,\r\n            item[1],\r\n          ]\r\n        })\r\n\r\n        resolve({\r\n          name: 'chart',\r\n          status: 'success',\r\n          result: {\r\n            price,\r\n            volume,\r\n          },\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'chart',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}