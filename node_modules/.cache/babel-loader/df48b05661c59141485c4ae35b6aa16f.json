{"ast":null,"code":"import axios from 'axios';\nimport _ from 'lodash';\nimport log from '../../util/log';\nimport { DateTime } from 'luxon';\nimport Big from 'big.js';\nimport MultiPoolApi from '../mocks/multiPoolApi.json';\nexport const loadMultiPool = () => async (dispatch, getState) => {\n  const contractAddress = getState().multiPool.contractAddress;\n  log.info('store:multiPool:load', contractAddress);\n  dispatch({\n    type: 'MULTI_POOL_LOADING'\n  });\n  Promise.all([getData(contractAddress), getBalancerLiquidity(), getBalancerPrice(), getChartData(contractAddress)]).then(_results => {\n    const anyErrors = _.some(_results, result => result.status === 'error');\n\n    log.info('store:statera:load:complete', _results, 'anyErrors?', anyErrors);\n\n    if (anyErrors) {\n      dispatch({\n        type: 'MULTI_POOL_ERROR'\n      });\n    } else {\n      dispatch({\n        type: 'MULTI_POOL_SUCCESS',\n        payload: _results\n      });\n    }\n  });\n}; // General Data\n\nconst getData = contractAddress => {\n  return new Promise(resolve => {\n    axios.post('https://api.thegraph.com/subgraphs/name/balancer-labs/balancer', {\n      query: `\n        {\n          pool(id: \"${contractAddress}\") {\n            id\n            swapFee\n            totalShares\n            liquidity\n            totalSwapVolume\n            holdersCount\n            swapFee\n            swaps (first: 1,orderBy: timestamp,orderDirection: desc, where: {timestamp_lt: ${Math.floor(Date.now() / 1000) - 86400}}) {\n              poolTotalSwapVolume\n            }\n          }\n        }\n      `\n    }).then(_res => {\n      var _res$data, _res$data$data, _data$swaps$;\n\n      const data = _res === null || _res === void 0 ? void 0 : (_res$data = _res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.pool;\n      log.info('multiPool:getData:success', _res.data.data);\n      const liquidity = Number(data.liquidity);\n      const volume = data.totalSwapVolume - ((_data$swaps$ = data.swaps[0]) === null || _data$swaps$ === void 0 ? void 0 : _data$swaps$.poolTotalSwapVolume);\n      const assetValue = liquidity / data.totalShares;\n      const feesEarned = volume * data.swapFee;\n      const feesApy = Math.pow(feesEarned / liquidity + 1, 365) - 1;\n      resolve({\n        name: 'data',\n        status: 'success',\n        result: {\n          assetValue,\n          liquidity,\n          volume,\n          feesEarned,\n          feesApy,\n          liquidityProviderCount: Number(data.holdersCount)\n        }\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'data',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n}; // Balancer Liquidity\n\n\nconst getBalancerLiquidity = () => {\n  return new Promise(resolve => {\n    axios.post('https://api.thegraph.com/subgraphs/name/balancer-labs/balancer', {\n      query: `\n        {\n          balancers {\n            totalLiquidity\n          }\n        }\n      `\n    }).then(_res => {\n      var _res$data2, _res$data2$data, _res$data2$data$balan;\n\n      const totalBalancerLiquidity = _res === null || _res === void 0 ? void 0 : (_res$data2 = _res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$data = _res$data2.data) === null || _res$data2$data === void 0 ? void 0 : (_res$data2$data$balan = _res$data2$data.balancers[0]) === null || _res$data2$data$balan === void 0 ? void 0 : _res$data2$data$balan.totalLiquidity;\n      log.info('multiPool:getBalancerLiquidity:success', totalBalancerLiquidity);\n      resolve({\n        name: 'balancerLiquidity',\n        status: 'success',\n        result: {\n          totalBalancerLiquidity: Big(totalBalancerLiquidity).toNumber()\n        }\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'data',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n}; // Balancer Price\n\n\nconst getBalancerPrice = () => {\n  return new Promise(resolve => {\n    axios.get('https://api.coingecko.com/api/v3/coins/balancer', {\n      params: {\n        localization: false,\n        market_data: true,\n        sparkline: false,\n        current_price: true,\n        currency: 'usd'\n      }\n    }).then(_res => {\n      var _res$data3, _res$data3$market_dat, _res$data3$market_dat2;\n\n      const balancerPrice = _res === null || _res === void 0 ? void 0 : (_res$data3 = _res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$market_dat = _res$data3.market_data) === null || _res$data3$market_dat === void 0 ? void 0 : (_res$data3$market_dat2 = _res$data3$market_dat.current_price) === null || _res$data3$market_dat2 === void 0 ? void 0 : _res$data3$market_dat2.usd;\n      log.info('multiPool:getBalancerPrice:success', balancerPrice);\n      resolve({\n        name: 'balancerPrice',\n        status: 'success',\n        result: {\n          balancerPrice\n        }\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'data',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n}; // Chart\n\n\nconst getChartData = contractAddress => {\n  return new Promise(resolve => {\n    const _res = MultiPoolApi;\n    axios.get(`${process.env.REACT_APP_MULTI_POOL_DATA_API}/api/data`).then(_res => {\n      log.info('multiPool:getChartData:success', _res.data);\n\n      let data = _res.data.map(item => {\n        const matchedPool = item.data.find(item => item.id === contractAddress);\n        return {\n          date: item.inserted_at,\n          volume: matchedPool['24HourVolume'],\n          liquidity: matchedPool.liquidity,\n          swapFee: matchedPool.swapFee,\n          totalShares: matchedPool.totalShares,\n          holdersCount: matchedPool.holdersCount\n        };\n      });\n\n      let assetPrice = [];\n      let volume = [];\n      let liquidity = [];\n      let feeReturns = [];\n      data.forEach(item => {\n        const date = DateTime.fromISO(item.date).toLocaleString(DateTime.DATE_MED);\n        const parsedVolume = Big(item.volume).toNumber();\n        const parsedLiquidity = Big(item.liquidity).toNumber();\n        const parsedFeeReturns = Math.pow(parsedVolume * 0.003 / parsedLiquidity + 1, 365) - 1;\n        const parsedTotalShares = Big(item.totalShares).toNumber();\n        const parsedAssetPrice = parsedLiquidity / parsedTotalShares;\n        assetPrice.push([date, parsedAssetPrice]);\n        volume.push([date, parsedVolume]);\n        liquidity.push([date, parsedLiquidity]);\n        feeReturns.push([date, parsedFeeReturns]);\n      });\n      resolve({\n        name: 'chart',\n        status: 'success',\n        result: {\n          chart: {\n            assetPrice,\n            volume,\n            liquidity,\n            feeReturns\n          }\n        }\n      });\n    }).catch(_error => {\n      resolve({\n        name: 'chart',\n        status: 'error',\n        result: _error\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/store/actions/multiPool.ts"],"names":["axios","_","log","DateTime","Big","MultiPoolApi","loadMultiPool","dispatch","getState","contractAddress","multiPool","info","type","Promise","all","getData","getBalancerLiquidity","getBalancerPrice","getChartData","then","_results","anyErrors","some","result","status","payload","resolve","post","query","Math","floor","Date","now","_res","data","pool","liquidity","Number","volume","totalSwapVolume","swaps","poolTotalSwapVolume","assetValue","totalShares","feesEarned","swapFee","feesApy","pow","name","liquidityProviderCount","holdersCount","catch","_error","totalBalancerLiquidity","balancers","totalLiquidity","toNumber","get","params","localization","market_data","sparkline","current_price","currency","balancerPrice","usd","process","env","REACT_APP_MULTI_POOL_DATA_API","map","item","matchedPool","find","id","date","inserted_at","assetPrice","feeReturns","forEach","fromISO","toLocaleString","DATE_MED","parsedVolume","parsedLiquidity","parsedFeeReturns","parsedTotalShares","parsedAssetPrice","push","chart"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { Dispatch } from 'redux'\r\nimport _ from 'lodash'\r\nimport log from '../../util/log'\r\nimport { DateTime } from 'luxon'\r\nimport Big from 'big.js'\r\nimport MultiPoolApi from '../mocks/multiPoolApi.json'\r\n\r\nexport const loadMultiPool = () => async (dispatch:Dispatch, getState:any) => {\r\n  const contractAddress:string = getState().multiPool.contractAddress\r\n  log.info('store:multiPool:load', contractAddress)\r\n  dispatch({ type: 'MULTI_POOL_LOADING' })\r\n\r\n  Promise.all([\r\n    getData(contractAddress),\r\n    getBalancerLiquidity(),\r\n    getBalancerPrice(),\r\n    getChartData(contractAddress),\r\n  ])\r\n    .then(_results => {\r\n      const anyErrors = _.some(_results, (result:any) => result.status === 'error')\r\n      log.info('store:statera:load:complete', _results, 'anyErrors?', anyErrors)\r\n\r\n      if (anyErrors) {\r\n        dispatch({ type: 'MULTI_POOL_ERROR' })\r\n      } else {\r\n        dispatch({ type: 'MULTI_POOL_SUCCESS', payload: _results })\r\n      }\r\n    })\r\n}\r\n\r\n\r\n// General Data\r\n\r\nconst getData = (contractAddress:string) => {\r\n  return new Promise(resolve => {\r\n    axios.post('https://api.thegraph.com/subgraphs/name/balancer-labs/balancer', {\r\n      query: `\r\n        {\r\n          pool(id: \"${contractAddress}\") {\r\n            id\r\n            swapFee\r\n            totalShares\r\n            liquidity\r\n            totalSwapVolume\r\n            holdersCount\r\n            swapFee\r\n            swaps (first: 1,orderBy: timestamp,orderDirection: desc, where: {timestamp_lt: ${ Math.floor(Date.now() / 1000) - 86400 }}) {\r\n              poolTotalSwapVolume\r\n            }\r\n          }\r\n        }\r\n      `\r\n    })\r\n      .then(_res => {\r\n        const data = _res?.data?.data?.pool\r\n        log.info('multiPool:getData:success', _res.data.data)\r\n\r\n        const liquidity = Number(data.liquidity)\r\n        const volume = data.totalSwapVolume - data.swaps[0]?.poolTotalSwapVolume\r\n        const assetValue = liquidity / data.totalShares\r\n        const feesEarned = volume * data.swapFee\r\n        const feesApy = (Math.pow(((feesEarned / liquidity) + 1), 365)) -1\r\n\r\n        resolve({\r\n          name: 'data',\r\n          status: 'success',\r\n          result: {\r\n            assetValue,\r\n            liquidity,\r\n            volume,\r\n            feesEarned,\r\n            feesApy,\r\n            liquidityProviderCount: Number(data.holdersCount),\r\n          },\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'data',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n\r\n\r\n// Balancer Liquidity\r\n\r\nconst getBalancerLiquidity = () => {\r\n  return new Promise(resolve => {\r\n    axios.post('https://api.thegraph.com/subgraphs/name/balancer-labs/balancer', {\r\n      query: `\r\n        {\r\n          balancers {\r\n            totalLiquidity\r\n          }\r\n        }\r\n      `\r\n    })\r\n      .then(_res => {\r\n        const totalBalancerLiquidity = _res?.data?.data?.balancers[0]?.totalLiquidity\r\n        log.info('multiPool:getBalancerLiquidity:success', totalBalancerLiquidity)\r\n\r\n        resolve({\r\n          name: 'balancerLiquidity',\r\n          status: 'success',\r\n          result: {\r\n            totalBalancerLiquidity: Big(totalBalancerLiquidity).toNumber(),\r\n          },\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'data',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n\r\n\r\n// Balancer Price\r\n\r\nconst getBalancerPrice = () => {\r\n  return new Promise(resolve => {\r\n    axios.get('https://api.coingecko.com/api/v3/coins/balancer', {\r\n      params: {\r\n        localization: false,\r\n        market_data: true,\r\n        sparkline: false,\r\n        current_price: true,\r\n        currency: 'usd',\r\n      },\r\n    })\r\n      .then(_res => {\r\n        const balancerPrice = _res?.data?.market_data?.current_price?.usd\r\n        log.info('multiPool:getBalancerPrice:success', balancerPrice)\r\n\r\n        resolve({\r\n          name: 'balancerPrice',\r\n          status: 'success',\r\n          result: {\r\n            balancerPrice,\r\n          },\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'data',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n\r\n\r\n// Chart\r\n\r\nconst getChartData = (contractAddress:string) => {\r\n  return new Promise(resolve => {\r\n    const _res:any = MultiPoolApi\r\n    axios.get(`${process.env.REACT_APP_MULTI_POOL_DATA_API}/api/data`)\r\n      .then(_res => {\r\n        log.info('multiPool:getChartData:success', _res.data)\r\n        let data = _res.data.map((item:any) => {\r\n          const matchedPool = item.data.find((item:any) => item.id === contractAddress)\r\n          return {\r\n            date: item.inserted_at,\r\n            volume: matchedPool['24HourVolume'],\r\n            liquidity: matchedPool.liquidity,\r\n            swapFee: matchedPool.swapFee,\r\n            totalShares: matchedPool.totalShares,\r\n            holdersCount: matchedPool.holdersCount,\r\n          }\r\n        })\r\n\r\n        let assetPrice:any = []\r\n        let volume:any = []\r\n        let liquidity:any = []\r\n        let feeReturns:any = []\r\n\r\n        data.forEach((item:any) => {\r\n          const date = DateTime.fromISO(item.date).toLocaleString(DateTime.DATE_MED)\r\n          const parsedVolume = Big(item.volume).toNumber()\r\n          const parsedLiquidity = Big(item.liquidity).toNumber()\r\n          const parsedFeeReturns = (Math.pow((((parsedVolume * 0.003) / parsedLiquidity) + 1), 365)) - 1\r\n          const parsedTotalShares = Big(item.totalShares).toNumber()\r\n          const parsedAssetPrice = parsedLiquidity / parsedTotalShares\r\n\r\n          assetPrice.push([\r\n            date,\r\n            parsedAssetPrice,\r\n          ])\r\n\r\n          volume.push([\r\n            date,\r\n            parsedVolume,\r\n          ])\r\n\r\n          liquidity.push([\r\n            date,\r\n            parsedLiquidity,\r\n          ])\r\n\r\n          feeReturns.push([\r\n            date,\r\n            parsedFeeReturns,\r\n          ])\r\n        })\r\n\r\n        resolve({\r\n          name: 'chart',\r\n          status: 'success',\r\n          result: {\r\n            chart: {\r\n              assetPrice,\r\n              volume,\r\n              liquidity,\r\n              feeReturns,\r\n            },\r\n          },\r\n        })\r\n      })\r\n      .catch(_error => {\r\n        resolve({\r\n          name: 'chart',\r\n          status: 'error',\r\n          result: _error\r\n        })\r\n      })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}