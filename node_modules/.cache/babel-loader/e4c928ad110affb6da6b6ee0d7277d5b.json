{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"../web3/connectors\";\nexport function useInactiveListener(suppress = false) {\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3React();\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      };\n\n      const handleChainChanged = chainId => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      };\n\n      const handleAccountsChanged = accounts => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      const handleNetworkChanged = networkId => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      };\n\n      ethereum.on('connect', handleConnect);\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect);\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}","map":{"version":3,"sources":["/Users/nco/Documents/GitHub/dashboard/src/hooks/useInactiveListener.ts"],"names":["useEffect","useWeb3React","injected","useInactiveListener","suppress","active","error","activate","ethereum","window","on","handleConnect","console","log","handleChainChanged","chainId","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAO,SAASC,mBAAT,CAA6BC,QAAiB,GAAG,KAAjD,EAAwD;AAC3D,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAA8BN,YAAY,EAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAW;AACjB,UAAM;AAAEQ,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,EAArB,IAA2B,CAACL,MAA5B,IAAsC,CAACC,KAAvC,IAAgD,CAACF,QAArD,EAA+D;AAC3D,YAAMO,aAAa,GAAG,MAAM;AACxBC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAN,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACH,OAHD;;AAIA,YAAMY,kBAAkB,GAAIC,OAAD,IAA8B;AACrDH,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DE,OAA1D;AACAR,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACH,OAHD;;AAIA,YAAMc,qBAAqB,GAAIC,QAAD,IAAwB;AAClDL,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6DI,QAA7D;;AACA,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACrBX,UAAAA,QAAQ,CAACL,QAAD,CAAR;AACH;AACJ,OALD;;AAMA,YAAMiB,oBAAoB,GAAIC,SAAD,IAAgC;AACzDR,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4DO,SAA5D;AACAb,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACH,OAHD;;AAKAM,MAAAA,QAAQ,CAACE,EAAT,CAAY,SAAZ,EAAuBC,aAAvB;AACAH,MAAAA,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4BI,kBAA5B;AACAN,MAAAA,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAA+BM,qBAA/B;AACAR,MAAAA,QAAQ,CAACE,EAAT,CAAY,gBAAZ,EAA8BS,oBAA9B;AAEA,aAAO,MAAM;AACT,YAAIX,QAAQ,CAACa,cAAb,EAA6B;AACzBb,UAAAA,QAAQ,CAACa,cAAT,CAAwB,SAAxB,EAAmCV,aAAnC;AACAH,UAAAA,QAAQ,CAACa,cAAT,CAAwB,cAAxB,EAAwCP,kBAAxC;AACAN,UAAAA,QAAQ,CAACa,cAAT,CAAwB,iBAAxB,EAA2CL,qBAA3C;AACAR,UAAAA,QAAQ,CAACa,cAAT,CAAwB,gBAAxB,EAA0CF,oBAA1C;AACH;AACJ,OAPD;AAQH;AACJ,GApCQ,EAoCN,CAACd,MAAD,EAASC,KAAT,EAAgBF,QAAhB,EAA0BG,QAA1B,CApCM,CAAT;AAqCH","sourcesContent":["import { useEffect } from \"react\"\nimport { useWeb3React } from \"@web3-react/core\"\n\nimport { injected } from \"../web3/connectors\"\n\nexport function useInactiveListener(suppress: boolean = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect((): any => {\n        const { ethereum } = window as any\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\n            const handleConnect = () => {\n                console.log(\"Handling 'connect' event\")\n                activate(injected)\n            }\n            const handleChainChanged = (chainId: string | number) => {\n                console.log(\"Handling 'chainChanged' event with payload\", chainId)\n                activate(injected)\n            }\n            const handleAccountsChanged = (accounts: string[]) => {\n                console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n                if (accounts.length > 0) {\n                    activate(injected)\n                }\n            }\n            const handleNetworkChanged = (networkId: string | number) => {\n                console.log(\"Handling 'networkChanged' event with payload\", networkId)\n                activate(injected)\n            }\n    \n            ethereum.on('connect', handleConnect)\n            ethereum.on('chainChanged', handleChainChanged)\n            ethereum.on('accountsChanged', handleAccountsChanged)\n            ethereum.on('networkChanged', handleNetworkChanged)\n    \n            return () => {\n                if (ethereum.removeListener) {\n                    ethereum.removeListener('connect', handleConnect)\n                    ethereum.removeListener('chainChanged', handleChainChanged)\n                    ethereum.removeListener('accountsChanged', handleAccountsChanged)\n                    ethereum.removeListener('networkChanged', handleNetworkChanged)\n                }\n            }\n        }\n    }, [active, error, suppress, activate])\n}"]},"metadata":{},"sourceType":"module"}